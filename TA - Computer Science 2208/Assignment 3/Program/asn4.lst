


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             asn5, CODE, READONLY
    2 00000000                 ENTRY
    3 00000000         
    4 00000000         ;This section will initialize the values that will be ut
                       ilized later in the function
    5 00000000         ;Will also perform the initial recursive call and retrei
                       ve the result
    6 00000000 E28FDF6D 
                       MAIN    ADR              sp, STACK   ;Saves the address 
                                                            of the stack into r
                                                            13 as a pointer
    7 00000004 E52DB004        STR              fp, [sp,#-4]! ;Decrement the st
                                                            ack pointer because
                                                             the stack we will 
                                                            use is FD
    8 00000008 E1A0B00D        MOV              fp, sp      ;Set fp equal to th
                                                            e beginning of the 
                                                            stack
    9 0000000C         
   10 0000000C E3A00000        MOV              r0, #0      ;Local variable for
                                                             result. To be pass
                                                            ed as parameter
   11 00000010 E3A01002        MOV              r1, #X      ;Parameter 1 (x) th
                                                            is is temporary sto
                                                            rage before load to
                                                             mem
   12 00000014 E3A02008        MOV              r2, #N      ;Parameter 2 (n) th
                                                            is is temporary sto
                                                            rage before load to
                                                             mem
   13 00000018 E92D0007        STMFD            sp!, {r0,r1,r2} ;Store paramete
                                                            rs into the FD stac
                                                            k
   14 0000001C EB000004        BL               POWER       ;Initial recursive 
                                                            call
   15 00000020 E51B000C        LDR              r0, [fp,#-12] ;Grab the return 
                                                            value which is abov
                                                            e the parameters, s
                                                            ave to r0
   16 00000024 E28F1F65        ADR              r1, RESULT  ;Get address of res
                                                            ult
   17 00000028 E5810000        STR              r0, [r1]    ;Store final answer
                                                             into result
   18 0000002C         ;At this point the final result is stored in the local v
                       ariable RESULT
   19 0000002C E1A0D00B        MOV              sp, fp      ;Clears the rest of
                                                             the stack
   20 00000030 EAFFFFFE 
                       LOOP    B                LOOP
   21 00000034         
   22 00000034         ;This section manages the stack for the current recursiv
                       e call
   23 00000034 E52DB004 
                       POWER   STR              fp, [sp,#-4]! ;Save old fp into
                                                             stack
   24 00000038 E1A0B00D        MOV              fp, sp      ;Change fp to point
                                                             to CURRENT stack f
                                                            rame's fp
   25 0000003C E92D4078        STMFD            sp!, {r3-r6,r14} ;Store working



ARM Macro Assembler    Page 2 


                                                             registers and LR
   26 00000040 E59B3004        LDR              r3, [fp,#4] ;Load running total
                                                             into r5
   27 00000044 E59B4008        LDR              r4, [fp,#8] ;Load parameter x i
                                                            nto r3
   28 00000048 E59B500C        LDR              r5, [fp,#12] ;Load parameter n 
                                                            into r4
   29 0000004C         
   30 0000004C         ;BASE CASE 1: This is when n is equal to 0
   31 0000004C E3550000        CMP              r5, #0      ;See if n = 0
   32 00000050 03A05001        MOVEQ            r5,#1       ;Use r5 as arbitrar
                                                            y storage for 1
   33 00000054 058B5004        STREQ            r5, [fp,#4] ;Store 1 into runni
                                                            ng total
   34 00000058 092D0038        STMFDEQ          sp!, {r3,r4,r5} ;Store paramete
                                                            rs into stack
   35 0000005C 0A000010        BEQ              RETURN      ;execute return ste
                                                            ps
   36 00000060         
   37 00000060         ;CASE 1: n is odd
   38 00000060 E3150001        TST              r5, #1      ;See if n is even. 
                                                            If so, can shorten 
                                                            the number of recur
                                                            sive calls
   39 00000064 12455001        SUBNE            r5, r5, #1  ;Decrement n
   40 00000068 192D0038        STMFDNE          sp!, {r3-r5} ;Store the paramet
                                                            ers to be used in n
                                                            ext frame
   41 0000006C 1A000007        BNE              RECURSE
   42 00000070         ;CASE 2: n is even
   43 00000070 01A050A5        LSREQ            r5,r5,#1    ;Divide by 2 if eve
                                                            n. NOTE zero bit se
                                                            t from TST above
   44 00000074 092D0038        STMFDEQ          sp!, {r3-r5} ;Store the updated
                                                             parameters into th
                                                            e stack
   45 00000078 0AFFFFFF        BEQ              SQUARE      ;Handle the case wh
                                                            en n is even
   46 0000007C         
   47 0000007C         ;This section performs the calculation for the case when
                        n is even
   48 0000007C EBFFFFEC 
                       SQUARE  BL               POWER       ;Recursive call
   49 00000080 E59D6000        LDR              r6, [sp]    ;Use r6 as a tempor
                                                            ary storage for the
                                                             old running total
   50 00000084 E0030696        MUL              r3, r6, r6  ;Squares the previo
                                                            us value
   51 00000088 E58B3004        STR              r3, [fp,#4] ;Store value back i
                                                            nto parameter
   52 0000008C EA000004        B                RETURN      ;Return current sta
                                                            ck frame
   53 00000090         ;This section performs the calculation for the case when
                        n is odd
   54 00000090 EBFFFFE7 
                       RECURSE BL               POWER       ;RECURSIVE CALL
   55 00000094 E59D6000        LDR              r6, [sp]    ;Load total into re
                                                            giter
   56 00000098 E0030496        MUL              r3, r6, r4  ;Multiply by x



ARM Macro Assembler    Page 3 


   57 0000009C E58B3004        STR              r3, [fp,#4] ;Store updated tota
                                                            l in param
   58 000000A0 EAFFFFFF        B                RETURN      ;Return current sta
                                                            ck frame
   59 000000A4         ;This section returns the current stack frame
   60 000000A4 E28DD00C 
                       RETURN  ADD              sp, sp, #12 ;Shift sp past the 
                                                            parameters
   61 000000A8 E8BD4078        LDMFD            sp!, {r3-r6,r14} ;Recover all t
                                                            he registers
   62 000000AC E1A0D00B        MOV              sp, fp      ;Move the SP back t
                                                            o the FP
   63 000000B0 E59DB000        LDR              fp, [sp]    ;Load the FP with t
                                                            he OLD FB
   64 000000B4 E28DD004        ADD              sp, sp, #4  ;Move stack pointer
                                                             back 4 bytes
   65 000000B8 E1A0F00E        MOV              pc, lr      ;Branch back to the
                                                             previous call
   66 000000BC         
   67 000000BC 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 4 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00               SPACE            0x100
   68 000001BC 00000000 
                       STACK   DCD              0x00
   69 000001C0 00000000 
                       RESULT  DCD              0x00
   70 000001C4 00000002 
                       X       EQU              2
   71 000001C4 00000008 
                       N       EQU              8
   72 000001C4         
   73 000001C4                 END
Command Line: --debug --xref --bi --apcs=interwork --depend=.\asn4.d -o.\asn4.o
 -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include --predefine="__EVAL SETA 1"
 --list=.\asn4.lst asn4.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

LOOP 00000030

Symbol: LOOP
   Definitions
      At line 20 in file asn4.s
   Uses
      At line 20 in file asn4.s
Comment: LOOP used once
MAIN 00000000

Symbol: MAIN
   Definitions
      At line 6 in file asn4.s
   Uses
      None
Comment: MAIN unused
POWER 00000034

Symbol: POWER
   Definitions
      At line 23 in file asn4.s
   Uses
      At line 14 in file asn4.s
      At line 48 in file asn4.s
      At line 54 in file asn4.s

RECURSE 00000090

Symbol: RECURSE
   Definitions
      At line 54 in file asn4.s
   Uses
      At line 41 in file asn4.s
Comment: RECURSE used once
RESULT 000001C0

Symbol: RESULT
   Definitions
      At line 69 in file asn4.s
   Uses
      At line 16 in file asn4.s
Comment: RESULT used once
RETURN 000000A4

Symbol: RETURN
   Definitions
      At line 60 in file asn4.s
   Uses
      At line 35 in file asn4.s
      At line 52 in file asn4.s
      At line 58 in file asn4.s

SQUARE 0000007C

Symbol: SQUARE
   Definitions
      At line 48 in file asn4.s
   Uses
      At line 45 in file asn4.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Comment: SQUARE used once
STACK 000001BC

Symbol: STACK
   Definitions
      At line 68 in file asn4.s
   Uses
      At line 6 in file asn4.s
Comment: STACK used once
asn5 00000000

Symbol: asn5
   Definitions
      At line 1 in file asn4.s
   Uses
      None
Comment: asn5 unused
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

N 00000008

Symbol: N
   Definitions
      At line 71 in file asn4.s
   Uses
      At line 12 in file asn4.s
Comment: N used once
X 00000002

Symbol: X
   Definitions
      At line 70 in file asn4.s
   Uses
      At line 11 in file asn4.s
Comment: X used once
2 symbols
342 symbols in table
