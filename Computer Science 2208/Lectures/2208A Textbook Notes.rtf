{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff31507\deff0\stshfdbch31505\stshfloch31506\stshfhich31506\stshfbi31507\deflang1033\deflangfe1033\themelang1033\themelangfe0\themelangcs0{\fonttbl{\f0\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f4\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Helvetica;}
{\f4\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Helvetica;}{\flomajor\f31500\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbmajor\f31501\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhimajor\f31502\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0302020204030204}Calibri Light;}
{\fbimajor\f31503\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\flominor\f31504\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbminor\f31505\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhiminor\f31506\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}
{\fbiminor\f31507\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f437\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\f438\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f440\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\f441\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\f442\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f443\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\f444\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\f445\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f477\fbidi \fswiss\fcharset238\fprq2 Helvetica CE;}{\f478\fbidi \fswiss\fcharset204\fprq2 Helvetica Cyr;}
{\f480\fbidi \fswiss\fcharset161\fprq2 Helvetica Greek;}{\f481\fbidi \fswiss\fcharset162\fprq2 Helvetica Tur;}{\f482\fbidi \fswiss\fcharset177\fprq2 Helvetica (Hebrew);}{\f483\fbidi \fswiss\fcharset178\fprq2 Helvetica (Arabic);}
{\f484\fbidi \fswiss\fcharset186\fprq2 Helvetica Baltic;}{\f485\fbidi \fswiss\fcharset163\fprq2 Helvetica (Vietnamese);}{\f477\fbidi \fswiss\fcharset238\fprq2 Helvetica CE;}{\f478\fbidi \fswiss\fcharset204\fprq2 Helvetica Cyr;}
{\f480\fbidi \fswiss\fcharset161\fprq2 Helvetica Greek;}{\f481\fbidi \fswiss\fcharset162\fprq2 Helvetica Tur;}{\f482\fbidi \fswiss\fcharset177\fprq2 Helvetica (Hebrew);}{\f483\fbidi \fswiss\fcharset178\fprq2 Helvetica (Arabic);}
{\f484\fbidi \fswiss\fcharset186\fprq2 Helvetica Baltic;}{\f485\fbidi \fswiss\fcharset163\fprq2 Helvetica (Vietnamese);}{\flomajor\f31508\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\flomajor\f31509\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flomajor\f31511\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flomajor\f31512\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\flomajor\f31513\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flomajor\f31514\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flomajor\f31515\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\flomajor\f31516\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fdbmajor\f31518\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbmajor\f31519\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fdbmajor\f31521\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fdbmajor\f31522\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbmajor\f31523\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fdbmajor\f31524\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fdbmajor\f31525\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbmajor\f31526\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fhimajor\f31528\fbidi \fswiss\fcharset238\fprq2 Calibri Light CE;}{\fhimajor\f31529\fbidi \fswiss\fcharset204\fprq2 Calibri Light Cyr;}{\fhimajor\f31531\fbidi \fswiss\fcharset161\fprq2 Calibri Light Greek;}
{\fhimajor\f31532\fbidi \fswiss\fcharset162\fprq2 Calibri Light Tur;}{\fhimajor\f31535\fbidi \fswiss\fcharset186\fprq2 Calibri Light Baltic;}{\fhimajor\f31536\fbidi \fswiss\fcharset163\fprq2 Calibri Light (Vietnamese);}
{\fbimajor\f31538\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fbimajor\f31539\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fbimajor\f31541\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\fbimajor\f31542\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fbimajor\f31543\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbimajor\f31544\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\fbimajor\f31545\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fbimajor\f31546\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\flominor\f31548\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\flominor\f31549\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flominor\f31551\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flominor\f31552\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\flominor\f31553\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flominor\f31554\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flominor\f31555\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\flominor\f31556\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fdbminor\f31558\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbminor\f31559\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fdbminor\f31561\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fdbminor\f31562\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbminor\f31563\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fdbminor\f31564\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fdbminor\f31565\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbminor\f31566\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fhiminor\f31568\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}{\fhiminor\f31569\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}{\fhiminor\f31571\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\fhiminor\f31572\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}
{\fhiminor\f31575\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}{\fhiminor\f31576\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}{\fbiminor\f31578\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fbiminor\f31579\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fbiminor\f31581\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbiminor\f31582\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fbiminor\f31583\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbiminor\f31584\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbiminor\f31585\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fbiminor\f31586\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;
\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\*\defchp 
\fs22\loch\af31506\hich\af31506\dbch\af31505 }{\*\defpap \ql \li0\ri0\sa160\sl259\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 }\noqfpromote {\stylesheet{\ql \li0\ri0\sa160\sl259\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \fs22\lang1033\langfe1033\loch\f31506\hich\af31506\dbch\af31505\cgrid\langnp1033\langfenp1033 \snext0 \sqformat \spriority0 Normal;}
{\*\cs10 \additive \ssemihidden \sunhideused \spriority1 Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tblind0\tblindtype3\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv \ql \li0\ri0\sa160\sl259\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \fs22\lang1033\langfe1033\loch\f31506\hich\af31506\dbch\af31505\cgrid\langnp1033\langfenp1033 \snext11 \ssemihidden \sunhideused 
Normal Table;}}{\*\revtbl {Unknown;}}{\*\rsidtbl \rsid1067391\rsid10307006}{\mmathPr\mmathFont34\mbrkBin0\mbrkBinSub0\msmallFrac0\mdispDef1\mlMargin0\mrMargin0\mdefJc1\mwrapIndent1440\mintLim0\mnaryLim1}{\info{\operator Z i Z o Samir}{\creatim\yr2013\mo12\dy13\hr2\min24}
{\revtim\yr2013\mo12\dy13\hr2\min25}{\version2}{\edmins1}{\nofpages92}{\nofwords12481}{\nofchars71142}{\nofcharsws83457}{\vern57435}}{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/word/2003/wordml}}
\paperw12240\paperh15840\margl1440\margr1440\margt1440\margb1440\gutter0\ltrsect 
\widowctrl\ftnbj\aenddoc\trackmoves0\trackformatting1\donotembedsysfont0\relyonvml0\donotembedlingdata1\grfdocevents0\validatexml0\showplaceholdtext0\ignoremixedcontent0\saveinvalidxml0\showxmlerrors0\horzdoc\dghspace120\dgvspace120\dghorigin1701
\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind1\viewscale100\rsidroot10307006 \fet0{\*\wgrffmtfilter 2450}\ilfomacatclnup0\ltrpar \sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang 
{\pntxtb (}{\pntxta )}}\pard\plain \ltrpar\ql \li0\ri0\nowidctlpar\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\tx7360\tx7940\tx8500\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 
\fs22\lang1033\langfe1033\loch\af31506\hich\af31506\dbch\af31505\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\ul\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 CHAPTER 3}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 The Instruction Set Architecture}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Understand how an instruc\hich\af4\dbch\af31505\loch\f4 tion is executed through a stored program machine
\par \hich\af4\dbch\af31505\loch\f4 - Know instruction formats for }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 memory-memory}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4 , }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 register-register}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Show how a processor can implement conditional behaviour
\par \tab \hich\af4\dbch\af31505\loch\f4 - Basically select 1 of 2 actions depending on a test result
\par \hich\af4\dbch\af31505\loch\f4 - Describe computer i\hich\af4\dbch\af31505\loch\f4 nstructions, and show how computers access data (addressing modes)
\par \hich\af4\dbch\af31505\loch\f4 - Introduce ARM development system and show ARM programs
\par \hich\af4\dbch\af31505\loch\f4 - Show how ARM uses }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 conditional execution}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  to implement efficient code
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 ARM}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 
\b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Microprocessor}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  (Stored program architecture)
\par \hich\af4\dbch\af31505\loch\f4 - Basically \hich\af4\dbch\af31505\loch\f4 means program and data is in same memory
\par \hich\af4\dbch\af31505\loch\f4 - Operates in }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 fetch-execute}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  mode

\par \tab \hich\af4\dbch\af31505\loch\f4 - Operations are read from men, decoded, and executed sequentially
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Registers}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Are storage elements, located IN CPU that behave like storage elements (temp storage)
\par \hich\af4\dbch\af31505\loch\f4 - Reg\hich\af4\dbch\af31505\loch\f4 ister "addresses" or "references" might be only 3-5 bits, to conserve memory
\par \tab \hich\af4\dbch\af31505\loch\f4 - May hold data elements }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 OR}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 pointers (addresses of data)
\par \hich\af4\dbch\af31505\loch\f4 - Most important one is Program Counter, contains address of }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 next instruction}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  to be executed 
\par \tab \hich\af4\dbch\af31505\loch\f4 - Also known as }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 instructio\hich\af4\dbch\af31505\loch\f4 n pointer}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Instruction Format:}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Instructions could be anywhere from 8 bits to 80 bits wide
\par \hich\af4\dbch\af31505\loch\f4 - Instruction format defines:
\par \tab \hich\af4\dbch\af31505\loch\f4 - # of bits used to define operation
\par \tab \hich\af4\dbch\af31505\loch\f4 - # of operands
\par \tab \hich\af4\dbch\af31505\loch\f4 - Format of operands
\par \hich\af4\dbch\af31505\loch\f4 For this course, instruction formats are:
\par 
\par \hich\af4\dbch\af31505\loch\f4 LDR }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 register\hich\af4\dbch\af31505\loch\f4  destination}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4 , memory(source)
\par \hich\af4\dbch\af31505\loch\f4 STR register(source), }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 memory destination}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 Operation }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 register destination}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
, register source1, register source2
\par 
\par \hich\af4\dbch\af31505\loch\f4 i.e.
\par \hich\af4\dbch\af31505\loch\f4 LDR }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 r1}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 , 1234
\par \hich\af4\dbch\af31505\loch\f4 STR r3, }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 2000}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 ADD }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 r1}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 , r2, r3
\par \hich\af4\dbch\af31505\loch\f4 SUB }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 r3}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 , r3, r1
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 LDR}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  (also: Load) copies data from memory to a register
\par \tab \hich\af4\dbch\af31505\loch\f4 - register destination, memory source
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 STR}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  (also: Store) stores data
\par \tab \hich\af4\dbch\af31505\loch\f4 - register source, memory destination
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Operation }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 register destination}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
, register source 1, register source 2
\par \hich\af4\dbch\af31505\loch\f4 - This has 3 operands, they all reference a register
\par \hich\af4\dbch\af31505\loch\f4 - "Operation" denotes wh\hich\af4\dbch\af31505\loch\f4 at is performed (i.e. ADD, SUB, AND) by CPU
\par \hich\af4\dbch\af31505\loch\f4 - 3 operand register - to - register is a characteristic of }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 RISC}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  processor (ARM, MIPS, Power PC)
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Stored Program Machine:}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Means the computer's program is in digital form in main memory
\par \hich\af4\dbch\af31505\loch\f4 - Counter register points\hich\af4\dbch\af31505\loch\f4  to next instruction to be executed
\par \hich\af4\dbch\af31505\loch\f4 - Operate in }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 fetch-execute}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  2 phases

\par \tab \hich\af4\dbch\af31505\loch\f4 - During fetch phase, next instruction is read from memory and decoded
\par \tab \hich\af4\dbch\af31505\loch\f4 - Execute phase, instruction is interpreted/executed by CPU
\par \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 FETCH AND EXECUTE OVERLAP, BECAUSE IT CAN DUE TO \hich\af4\dbch\af31505\loch\f4 PIPELINING (ARM)}{\rtlch\fcs1 \af4\afs36 
\ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par 
\par \hich\af4\dbch\af31505\loch\f4 Register Labels:
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 MAR (Memory Address Register)}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
: stores address of location in main memory being accessed at the moment
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 MBR (Memory Buffer Register)}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
: stores data that was JUST read from main memory, or data to be written IMMEDIATELY to ma\hich\af4\dbch\af31505\loch\f4 in memory
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 PC (Program Counter)}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
: contains address of next instruction to be executed
\par \tab \hich\af4\dbch\af31505\loch\f4 - It points to location that holds next instruction
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 IR (Instruction Register)}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 : stores instruction being executed

\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 r0-r7 (Register File)}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 : Eight general purpose registers that store temp working data
\par \tab \hich\af4\dbch\af31505\loch\f4 - A computer requires at least one of these
\par 
\par \hich\af4\dbch\af31505\loch\f4 Hypothetical Computer 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 FETCH}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 i)\tab }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 PC}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  gives address to }{
\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 MAR}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 , and address is stored while instruction is obtained
\par \hich\af4\dbch\af31505\loch\f4 ii)\tab Instruction (op-code) is loaded on\hich\af4\dbch\af31505\loch\f4 to }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 MBR}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  and copied to }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 IR}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \tab \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 IR}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 is where op-code is decoded
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 EXECUTE}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 iii)\tab }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Operands}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  read from }{
\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Register File}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  & transferred to }{\rtlch\fcs1 \ab\af4\afs36 
\ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 ALU}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 iv)\tab }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 ALU}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 operates on operands, transfers result to }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Destination Register}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  

\par 
\par \hich\af4\dbch\af31505\loch\f4 If a load/store operation was required:
\par \hich\af4\dbch\af31505\loch\f4 ii)\tab }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Memory Address}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  in }{
\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 IR}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  is sent to }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 
\b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 MAR}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 , and read/write operation is performed
\par 
\par \hich\af4\dbch\af31505\loch\f4 Hypothetical Computer (cont'd)
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 FETCH in RTL}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par 
\par \hich\af4\dbch\af31505\loch\f4 FETCH\tab \tab [MAR]\tab <-\tab [PC]\tab \tab ; PC (program counter/instruction pointer) is copied to MAR (memory address register)
\par \tab \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 [PC]\tab \tab <- [PC] +4\tab ; PC i\hich\af4\dbch\af31505\loch\f4 s incremented (4 because ARM's instructions are 4 bytes in length)
\par \hich\af4\dbch\af31505\loch\f4  \tab \tab \tab \tab [MBR]\tab <-\tab [MAR]\tab ; MAR points to instruction by loading it onto }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 MBR}{\rtlch\fcs1 \af4\afs36 
\ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \tab \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 [IR]\tab \tab <-\tab [MBR]\tab ; MBR instruction is copied to IR
\par 
\par \hich\af4\dbch\af31505\loch\f4 LDR\tab \tab \tab [MAR]\tab <-\tab [IR(address)] \tab ; Copies operand address from IR \hich\af4\dbch\af31505\loch\f4 to MAR
\par \tab \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 [MBR]\tab <- [MAR]\tab \tab \tab \tab ; Operand value is "Read" by copying it to MBR
\par \tab \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 [r1]\tab \tab <-\tab [MBR]\tab \tab \tab \tab ; Operand is added to }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 r1}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Constants}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - If we want to load logical }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 1234}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 into }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 r1}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - It is a "literal" operand
\par 
\par \hich\af4\dbch\af31505\loch\f4 ADD\tab }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 r0}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 , r1, #25 \tab \tab 
; adds 25 to r1, and places sum into }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 r0}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par 
\par \hich\af4\dbch\af31505\loch\f4 - IR routes a literal operand to }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 register files}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4 , }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 MBR, and ALU}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - When ADD\tab }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 r0}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
, r1, #25, is executed, operand }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 r1}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 is routed from operand field of IR, not through MBR
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Sample Instructions}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 LDR\tab r0, address\tab ; L\hich\af4\dbch\af31505\loch\f4 oad contents of }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 address}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  into r0
\par \hich\af4\dbch\af31505\loch\f4 STR \tab r0, address\tab ; Store contents of }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 r0}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  into }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 address}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 ADD r0, r1, r2\tab \tab ; Add r1 to r2, and store in r0
\par \hich\af4\dbch\af31505\loch\f4 SUB \tab r0, r1, r2\tab \tab ; Subtract r2 from r1, and store in r0
\par \hich\af4\dbch\af31505\loch\f4 BPL \tab target\tab \tab \tab ; IF, previous operation result is positive, then bra\hich\af4\dbch\af31505\loch\f4 nch to }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 target
}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 BEQ\tab target\tab \tab \tab ; IF, previous operation result is zero, then branch to }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 target}{\rtlch\fcs1 \af4\afs36 
\ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 B \tab \tab target\tab \tab \tab ; Branch unconditionally and execute instruction at }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 target}{\rtlch\fcs1 \af4\afs36 
\ltrch\fcs0 \f4\fs36\insrsid1067391 
\par 
\par \hich\af4\dbch\af31505\loch\f4 NOTE, LDR r0, address & STR r0, address are pseudo instructions
\par \tab \hich\af4\dbch\af31505\loch\f4 - They are not part of ARM \hich\af4\dbch\af31505\loch\f4 processor instruction set, and assembler translates them into other instructions
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Flow Control}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Any action that modifies the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 instruction-by-instruction}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  sequence of a program
\par \tab \hich\af4\dbch\af31505\loch\f4 - Pretty much, a computer's ability to modify instructions out of the normal sequence\tab - i.e. }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Branches}{\rtlch\fcs1 
\af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  and }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Jumps}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  to a specific point
\par \tab \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Conditional Behaviour}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 is an example, where the processor can do one of two things (i.e. multiplexer)
\par 
\par \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 BEQ}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  requires eit
\hich\af4\dbch\af31505\loch\f4 her executing normally OR loading }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 PC}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  with new value, and }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 BRANCHING}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 i.e.
\par 
\par \tab \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 SUBS\tab r5, r5, #1\tab \tab ; Subtract 1 from r5 (r5 may now be 0 at this point)
\par \tab \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 BEQ\tab \tab onZero\tab \tab \tab ; IF zero, jump to line with label "onZero" (forced branch)
\par \hich\af4\dbch\af31505\loch\f4 notZero\tab \tab ADD\tab \tab r1, r2, r3\tab \tab ; ELS\hich\af4\dbch\af31505\loch\f4 E continue on from here (if r5 !=0, it continues here)
\par .
\par .
\par .
\par .
\par \hich\af4\dbch\af31505\loch\f4 onZero\tab \tab SUB\tab \tab r1, r2, r3\tab \tab ; Branch takes us here
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 (See }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 fig 3.6 }{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
for how ALU modifies sequence of instructions)
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Status Information}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 CCR (Condition Code Register)}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
: is a register that stores the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 status}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  or }{\rtlch\fcs1 
\ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 condition}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  information
\par \hich\af4\dbch\af31505\loch\f4 - Records whether the result is:
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 zero (z)}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 negative (n)
\par \hich\af4\dbch\af31505\loch\f4 carry (c)
\par \hich\af4\dbch\af31505\loch\f4 arithmetic overflow (v)}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par 
\par \hich\af4\dbch\af31505\loch\f4 CISC processors (intel) update status flags after every operation
\par \hich\af4\dbch\af31505\loch\f4 RISC processors (ARM) require programmer to update status flags
\par \tab \hich\af4\dbch\af31505\loch\f4 - implemented in ARM by adding a }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 S}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  to the end of an instruction (i.e. SUB}{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 S}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  or ADD}{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 S}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 )
\par \tab \hich\af4\dbch\af31505\loch\f4 - More advantageous because you can }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 CHOOSE}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  WHEN to destroy status/condition bits 
\par 
\par \hich\af4\dbch\af31505\loch\f4 i.e. If we have
\par 
\par \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 LDR\tab \tab r0, P\tab \tab \tab ; Load r0 with contents of P
\par \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 LDR\tab \tab r1, Q\tab \tab \tab ; Load r1 with contents of Q
\par \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 SUBS\tab r2, r0, r1\tab ; Subtract Q from P (X = P - Q)
\par \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 BPL\tab \tab THEN\tab \tab ; If X }{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\ul\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 >}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  0, then execute "THEN"
\par \hich\af4\dbch\af31505\loch\f4 ELSE\tab ADD\tab \tab r0, r0, #20\tab ; ELSE add 20 to r0
\par \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 B\tab \tab \tab EXIT\tab \tab \tab ; Skip past "THEN" to "EXIT" (Forced branch)
\par \hich\af4\dbch\af31505\loch\f4 THEN\tab ADD\tab \tab r0,\hich\af4\dbch\af31505\loch\f4  r0, #5\tab ; Add 5 to r0 
\par \hich\af4\dbch\af31505\loch\f4 EXIT\tab \tab STR\tab \tab r0, X\tab \tab \tab ; Store r0 in X
\par \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 STOP
\par 
\par \hich\af4\dbch\af31505\loch\f4 P\tab \tab \tab DCD\tab \tab 12\tab \tab \tab \tab ; Reserved Memory for P
\par \hich\af4\dbch\af31505\loch\f4 Q\tab \tab \tab DCD\tab \tab 9\tab \tab \tab \tab ; Reserved Memory for Q
\par \hich\af4\dbch\af31505\loch\f4 X\tab \tab \tab DCD\tab \tab \tab \tab \tab \tab ; Reserved Memory for X
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 There are 2 cases in this scenario}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 1) P = 12, Q = 9; }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 THEN}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 branch is taken
\par \hich\af4\dbch\af31505\loch\f4 2) P = 12, Q = 4; }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 ELSE}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 branch is taken 
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 What if we need to calculate
\par \hich\af4\dbch\af31505\loch\f4 \hich\f4 1 + 2 + 3 + 4 + \'85\loch\f4  + 20}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  ?
\par 
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 LDR\tab r0, #1\tab \tab ; Puts 1 in r0 (counter)
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 LDR\tab r1, #0\tab \tab ; Puts 0 in r1 (sum)
\par \hich\af4\dbch\af31505\loch\f4 Next\tab ADD\tab r1, r1, r0\tab ; REPEATS: Adds the count to sum
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 ADD\tab r0, r0, #1\tab ; Add 1 to count\hich\af4\dbch\af31505\loch\f4 er
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 CMP r0, #21\tab \tab ; Compares counter to 21, have we added all numbers?
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 BNE\tab Next\tab \tab \tab ; Repeats code until 20 iterations
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 STOP
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 3.2 Components of ISA}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Registers}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - They are not necessary, but they help with }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 efficiency}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 Lets say we implement
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 ADD A, B, C}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - An\hich\af4\dbch\af31505\loch\f4 d A, B, and C are 32 bit memory locations
\par \hich\af4\dbch\af31505\loch\f4 - THE WIDTH WOULD BE 112 BITS, which is huge
\par 
\par \hich\af4\dbch\af31505\loch\f4 Using a register, we can shorten it to 32 bits
\par \hich\af4\dbch\af31505\loch\f4 Op-code/Instruction\tab Control Bits\tab DestinationRegister Register1Source Register2Source
\par \hich\af4\dbch\af31505\loch\f4 (17 bits)\tab \tab \tab \tab \tab          \tab \tab \tab (5 Bits)  \hich\af4\dbch\af31505\loch\f4                     (5 Bits)                (5 Bits)
\par \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 ARM processor has 32 bit registers, 32 bit }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 PC}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4 , and 32 bit wordlength
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 General Purpose vs Special Purpose Registers}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - ARM has general purpose registers
\par \tab \hich\af4\dbch\af31505\loch\f4 - Although it has 2 specially reserved (cannot be accessed for data processing)
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - r14 is }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 link register}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 that holds return addresses
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - r15 is the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 program counter}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - It is good practice to use }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 r13}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  as a stack pointer
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Data Extension}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Sometimes register\hich\af4\dbch\af31505\loch\f4 s hold smaller data values than their actual length
\par \hich\af4\dbch\af31505\loch\f4 - What happens to the unused bits is processor dependent; 
\par \tab \hich\af4\dbch\af31505\loch\f4 - Some processors change unused bits to 0, some leave it unchanged, and some extend (pad) the bits to 32 bits
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Addressing Modes:}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 There are 3 fun\hich\af4\dbch\af31505\loch\f4 damental addressing modes
\par \hich\af4\dbch\af31505\loch\f4 i) Literal/Immediate (value is part of instruction, i.e. the number 25)
\par \tab \hich\af4\dbch\af31505\loch\f4 - i.e. ADD r1,r2,#5 (number 5) 
\par \hich\af4\dbch\af31505\loch\f4 ii) Direct/Absolute (instruction provides memory address of operand) [}{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 NOT ARM SUPPORTED}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 ]
\par \hich\af4\dbch\af31505\loch\f4 iii) Register Indirect/Pointer Based\hich\af4\dbch\af31505\loch\f4 / Indexed (register contains address of operand)
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Instruction Types:}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 Memory-Register
\par \tab \hich\af4\dbch\af31505\loch\f4 - Source in memory, destination in register
\par 
\par \hich\af4\dbch\af31505\loch\f4 Register-Memory
\par \tab \hich\af4\dbch\af31505\loch\f4 - Source in register, destination in memory
\par 
\par \hich\af4\dbch\af31505\loch\f4 Register-Register
\par \tab \hich\af4\dbch\af31505\loch\f4 - Both operands in register
\par 
\par \hich\af4\dbch\af31505\loch\f4 CISC allow M-R, and R-M
\par \hich\af4\dbch\af31505\loch\f4 RISC (Like ARM) only allow R-R processing operations
\par \hich\af4\dbch\af31505\loch\f4 - There are special LOAD/STORE instructions to transfer data from }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 M-R}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  or }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 R-M}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  

\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Program Counter Relative Addressing}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Register indirect addressing lets you specify operand locatio\hich\af4\dbch\af31505\loch\f4 n with respect to register
\par \hich\af4\dbch\af31505\loch\f4 i.e.
\par 
\par \hich\af4\dbch\af31505\loch\f4 LDR\tab r0, [r1, #16] specifies that the operand/instruction is 16 bytes from r1
\par \hich\af4\dbch\af31505\loch\f4 - ARM }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 PC}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 is always 8 bytes from current instruction (64 bits) }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 DUE TO PIPELINING}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - PC relative addressing lets you make an address of an operand (\hich\af4\dbch\af31505\loch\f4 with respect to the program that accesses it)
\par \tab \hich\af4\dbch\af31505\loch\f4 - Relocating the program and data elsewhere in memory doesn't change the offset
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Op-Codes/Instructions}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 3 address, 2 address, 1 address, and 0 addresses are all possible for computers
\par \hich\af4\dbch\af31505\loch\f4 CISC have 2 address instru\hich\af4\dbch\af31505\loch\f4 ctions, 1 is memory and 1 is register
\par 
\par \hich\af4\dbch\af31505\loch\f4 RISC (ARM) have 3 address instructions (operand addresses are all registers)
\par \tab \hich\af4\dbch\af31505\loch\f4 - Have dedicated 2 address instructions for }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 LOAD}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  and }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 STORE}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 ISA}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 Address formats for RISC:
\par 
\par \hich\af4\dbch\af31505\loch\f4 3\tab ADD P,Q,R\tab ; Q adds to R and stored in P
\par \hich\af4\dbch\af31505\loch\f4 2\tab ADD P,Q\tab \tab ; Q adds to P and stored in P
\par \hich\af4\dbch\af31505\loch\f4 1\tab ADD P\tab \tab \tab ; P is added to accumulator, result in accumulator
\par 0\tab \hich\af4\dbch\af31505\loch\f4 ADD\tab \tab \tab \tab ; Pop 2 items from runtime stack, operate on them, push result
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Two Address Machines}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 CISC has }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 2}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 address instruction format
\par \hich\af4\dbch\af31505\loch\f4 - 1 operand appears t\hich\af4\dbch\af31505\loch\f4 wice, once as source and then as destination
\par \hich\af4\dbch\af31505\loch\f4 - Using a 2 address machine overwrites a source operand
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 One Address Machine}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Specifies 1 operand
\par \hich\af4\dbch\af31505\loch\f4 - 2nd operand is }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 accumulator}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
, it doesn't need to be specified
\par \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 [A]}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 indicates contents of accumulator
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Zero Add\hich\af4\dbch\af31505\loch\f4 ress Machines}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Referred to as stack machines
\par \hich\af4\dbch\af31505\loch\f4 - Operates on data at the top of a stack
\par \hich\af4\dbch\af31505\loch\f4 i.e.
\par \hich\af4\dbch\af31505\loch\f4 Z = (A+B) * (C-D)
\par 
\par \hich\af4\dbch\af31505\loch\f4 PUSH \tab A
\par \hich\af4\dbch\af31505\loch\f4 PUSH\tab B
\par \hich\af4\dbch\af31505\loch\f4 ADD
\par \hich\af4\dbch\af31505\loch\f4 PUSH\tab C
\par \hich\af4\dbch\af31505\loch\f4 PUSH\tab D
\par \hich\af4\dbch\af31505\loch\f4 SUB
\par \hich\af4\dbch\af31505\loch\f4 MUL
\par \hich\af4\dbch\af31505\loch\f4 POP\tab \tab Z 
\par 
\par \hich\af4\dbch\af31505\loch\f4 - It is easy for stack machines to handle boolean logic
\par \hich\af4\dbch\af31505\loch\f4 - It can be used as a branch on true or branch on sales command 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 One-And-A-Half Address Machines}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - One operand is in memory, one is in register
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 - Predominantly Intel}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Memory to register instructions }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 
\par 
\par \hich\af4\dbch\af31505\loch\f4 ARM Registers}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - RISC is (}{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 R}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 educed }{\rtlch\fcs1 
\ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 I}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 nstru}{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4 C}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 tion }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 S}{\rtlch\fcs1 \af4\afs36 
\ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 et)
\par \hich\af4\dbch\af31505\loch\f4 - ARM is 32 bit machine with R-R architecture, and Load/Store instructions
\par \hich\af4\dbch\af31505\loch\f4 - All operands are }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 32 bits wide}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
, and some multiplication instructions that generate }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 64 bit}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 products stored in 32bit registers
\par \hich\af4\dbch\af31505\loch\f4 - from r0-r15 is }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 16}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 programmer-visible registers
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 R15}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  is accessible by programmer (}{\rtlch\fcs1 \ab\af4\afs36 
\ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 PC}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 ) and is used to implement branch operations
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 r0}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 -}{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 
\b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 r13}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  is general purpose
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 r13}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 is used as stack pointer in good programming
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 r14}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 stores subroutine return address
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 r15}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 contains program register
\par \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 16}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 registers is (4) bit addresses (2^4 possibilities)
\par \hich\af4\dbch\af31505\loch\f4 - Saves 3 bits of instruction over RISC processors that use 5 bit addresses
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 ARM}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 's }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 
\b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 CPSR}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  (current program status register) contains 32 Bits
\par \hich\af4\dbch\af31505\loch\f4 Condition Codes, and Operating Mode 
\par \hich\af4\dbch\af31505\loch\f4 (DRAW HERE) (}{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Z, N, C, V}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 ) - F
\hich\af4\dbch\af31505\loch\f4 lag bits
\par 
\par \hich\af4\dbch\af31505\loch\f4 ARM has a rich instruction set (recall the one typed out before)
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 ARM Assembly Language}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 ADD
\par \hich\af4\dbch\af31505\loch\f4 SUB
\par \hich\af4\dbch\af31505\loch\f4 AND
\par \hich\af4\dbch\af31505\loch\f4 ORR
\par \hich\af4\dbch\af31505\loch\f4 EOR
\par \hich\af4\dbch\af31505\loch\f4 MUL
\par \hich\af4\dbch\af31505\loch\f4 MOV
\par \hich\af4\dbch\af31505\loch\f4 CMP
\par \hich\af4\dbch\af31505\loch\f4 BEQ
\par 
\par \hich\af4\dbch\af31505\loch\f4 Instructions written in the form
\par \hich\af4\dbch\af31505\loch\f4 Label\tab Op-Code\tab }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 operand1}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
, operand2, operand3    ; comment
\par 
\par \hich\af4\dbch\af31505\loch\f4 Label - Is a user-defined label that can be used by instructions to refer to that line
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Structure of ARM}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 
\b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Program}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Executable Instructions}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 : 
\par \tab \hich\af4\dbch\af31505\loch\f4 - Are instructions executed by the computer
\par \tab \hich\af4\dbch\af31505\loch\f4 - Written in white
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Assembler Directives:}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \tab \hich\af4\dbch\af31505\loch\f4 - Tell the compiler informa\hich\af4\dbch\af31505\loch\f4 tion about the environment 
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 -i.e. Where the code is to be found in memory
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - Allocating space to storage variables
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - Set up initial data
\par \tab \hich\af4\dbch\af31505\loch\f4 - Written in bold
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Area ARMtest, CODE, READONLY
\par \hich\af4\dbch\af31505\loch\f4 ENTRY}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 MOV\tab r0, #0\tab \tab \tab ; clear r0 total
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 MOV r1, #10\tab \tab \tab ; For i = 1\hich\af4\dbch\af31505\loch\f4  to 10 (count down)
\par \hich\af4\dbch\af31505\loch\f4 Next\tab MUL }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 r2}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 , r1, r1\tab \tab ; 
\tab Square num (r1 and r1)
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 MLA\tab r0, r2, r1, r0\tab ; \tab Cube num and add to total
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 SUBS r1, r1, #1\tab \tab ; \tab Decrement counter (and set condition flags)
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 BNE Next\tab \tab \tab \tab ; END FOR (branch back on the count, not on zero)
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 END}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par 
\par \hich\af4\dbch\af31505\loch\f4 - Dissassembly means that assembler code is converted back to }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 source}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  form (shows both code and instructions)
\par \tab \hich\af4\dbch\af31505\loch\f4 - Shows memory address, code generated and instructions themselves
\par \tab \hich\af4\dbch\af31505\loch\f4 - Shows that instructions/code are stored in }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 binary}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Dissassembly can be sho\hich\af4\dbch\af31505\loch\f4 wn in anything (Shown in hex in uVision)
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 List of Assembly Language Directives}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 EQU\tab \tab equate\tab \tab \tab \tab Equate a name to a value (basically like define and initialize variable)
\par \hich\af4\dbch\af31505\loch\f4 DCD\tab \tab define constant\tab Set up 32 bit constant in memory (preloading memory before program r\hich\af4\dbch\af31505\loch\f4 uns) - Uses 4 bytes
\par \hich\af4\dbch\af31505\loch\f4 DCW\tab define constant\tab Set up 16 bit constant in memory - Uses 2 bytes
\par \hich\af4\dbch\af31505\loch\f4 DCB\tab \tab define constant\tab Set up 8 bit constant in memory - Uses 1 byte
\par \hich\af4\dbch\af31505\loch\f4 END\tab \tab \tab \tab \tab \tab \tab \tab End of code
\par \hich\af4\dbch\af31505\loch\f4 ENTRY\tab \tab \tab \tab \tab \tab \tab Starting point
\par \hich\af4\dbch\af31505\loch\f4 AREA\tab \tab \tab \tab \tab \tab \tab Region of code or data
\par \hich\af4\dbch\af31505\loch\f4 ALIGN\tab \tab \tab \tab \tab \tab \tab Align\hich\af4\dbch\af31505\loch\f4 s instructions on 32 bit boundaries (should be used if dealing with DCB\hich\f4 \rquote \loch\f4 s)
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Practical Considerations of ARM Assembler}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Literals used as operands are prefixed by #
\par \hich\af4\dbch\af31505\loch\f4 - Numbers are regarded as decimal, unless prefixed by 0x (indicates hexadecimal)
\par \hich\af4\dbch\af31505\loch\f4 - ASCII ch\hich\af4\dbch\af31505\loch\f4 aracters are shown by }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 single quotes}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  'A'
\par \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Magic Code}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 is machine dependent (code must be learned based on OS)
\par 
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 PseudoInstructions}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 Operation that programmer can use when writing code
\par \hich\af4\dbch\af31505\loch\f4 - It doesn't exist in the ISA, but assembler generates appropriate code t\hich\af4\dbch\af31505\loch\f4 o carry out the action
\par 
\par \hich\af4\dbch\af31505\loch\f4 i.e.
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \tab \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 ADR}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  r1, MyArray\tab 
; Sets up register 1 to point to MyArray
\par \loch\af4\dbch\af31505\hich\f4 \'85
\par \tab \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 LDR\tab r3, [r1]\tab \tab \tab ; reads an element using the pointer
\par \hich\af4\dbch\af31505\loch\f4 MyArray\tab DCD 0x12345678\tab ; address of this data is loaded
\par 
\par \hich\af4\dbch\af31505\loch\f4 - \hich\af4\dbch\af31505\loch\f4 Easy because programmer doesn't need to know how assembler generates code to implement }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 ADR}{
\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 ADR}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 is used to load 32 bit address into a register
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 MAIN POINT:}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 that we can load 32 bit values into registers
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 LDR rd = value}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - allows register (rd) to be load\hich\af4\dbch\af31505\loch\f4 ed with a stated value
\par \hich\af4\dbch\af31505\loch\f4 i.e.
\par \hich\af4\dbch\af31505\loch\f4 LDR r0, = 0x12345678
\par 
\par \hich\af4\dbch\af31505\loch\f4 Assembler will use 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 MOV}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  or }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 
\b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 MVN}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 , OR 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 LDR}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  r0, [pc,#offset] instruction to access appropriate constant

\par \tab \hich\af4\dbch\af31505\loch\f4 - Constant 12345678(base16) is stored in }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 literal pool}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  or }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 constant pool}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par 
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 3.5 ARM}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 
\b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Data processing Instruc\hich\af4\dbch\af31505\loch\f4 tions}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 Addition\tab \tab ADD
\par \hich\af4\dbch\af31505\loch\f4 Subtract\tab \tab SUB
\par \hich\af4\dbch\af31505\loch\f4 Negation\tab \tab NEG
\par \hich\af4\dbch\af31505\loch\f4 Comparison\tab CMP
\par \hich\af4\dbch\af31505\loch\f4 Multiply\tab \tab \tab MUL
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Shifting}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \tab \tab \hich\af4\dbch\af31505\loch\f4 LSL, LSR, ASL, ASR, ROL, ROR
\par \tab \hich\af4\dbch\af31505\loch\f4 - (Note) there is no explicit shift function, but combines shift with other operations
\par 
\par \hich\af4\dbch\af31505\loch\f4 i.e.
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 ADD}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \tab \hich\af4\dbch\af31505\loch\f4 - Is only single precision
\par \tab \hich\af4\dbch\af31505\loch\f4 - if you add r0 to r1, carry bit is stored in carry flag
\par \hich\af4\dbch\af31505\loch\f4 and
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 ADC}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  (Add with carry, allows extended precision)
\par \tab \hich\af4\dbch\af31505\loch\f4 - Double precision
\par \tab \hich\af4\dbch\af31505\loch\f4 - Carry out is stored in carry bit
\par \tab \hich\af4\dbch\af31505\loch\f4 - Make it so that the 2nd addition operation has a CARRY VALUE
\par \tab \hich\af4\dbch\af31505\loch\f4 - USED IN "chain arithmet\hich\af4\dbch\af31505\loch\f4 ic" on word lengths greater than the word length of computer**
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 MUL}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \tab \hich\af4\dbch\af31505\loch\f4 - Calculates product of 2, 32 bit signed integers in 2 32 bit registers
\par \tab \hich\af4\dbch\af31505\loch\f4 - Result ( lower order 32 bits of answer) is stored in a 32 bit register
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 MLA}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \tab \hich\af4\dbch\af31505\loch\f4 - Multiply and accumulate 
\par \tab \hich\af4\dbch\af31505\loch\f4 - Multip\hich\af4\dbch\af31505\loch\f4 lies, and adds the product to a running total
\par \tab \hich\af4\dbch\af31505\loch\f4 - Supports calculation of inner product (1 multiply and 1 addition per instruction)
\par \tab \hich\af4\dbch\af31505\loch\f4 - Good for using in multimedia applications
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Bitwise Logical Operations}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 Instruction\tab \tab \tab Operation\tab \tab \tab \tab \tab \tab Final Value in r2
\par \hich\af4\dbch\af31505\loch\f4 AND r2, r, r0\tab \tab 11001010.00001111\tab \tab 00001010
\par \hich\af4\dbch\af31505\loch\f4 OR r2, r1, r0\tab \tab 11001010+00001111\tab \tab 11001111
\par \hich\af4\dbch\af31505\loch\f4 NOT r2, r1\tab \tab \tab 11001010\tab \tab \tab \tab \tab \tab 00110101
\par \hich\af4\dbch\af31505\loch\f4 EOR r2, r1, r0\tab 11001010 (+)00001111\tab 11000101
\par 
\par \hich\af4\dbch\af31505\loch\f4 - ARM lacks NOT, but you can use EOR with 2nd operand equal to 32(bits) of 1
\par \tab \hich\af4\dbch\af31505\loch\f4 - x(+) 1 i\hich\af4\dbch\af31505\loch\f4 s NOT x
\par 
\par \hich\af4\dbch\af31505\loch\f4 - OR use }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 MVN}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
, an operation that copies logical complement of a value
\par 
\par \hich\af4\dbch\af31505\loch\f4 Example of Bitwise Logical Operations
\par \hich\af4\dbch\af31505\loch\f4 - r0 : bbbbbbxx
\par \hich\af4\dbch\af31505\loch\f4 - r1 : bbbyyybb
\par \hich\af4\dbch\af31505\loch\f4 - r2 : zzzbbbbb
\par \hich\af4\dbch\af31505\loch\f4 (x,y,z) represent bits of desired fields
\par \hich\af4\dbch\af31505\loch\f4 b's are unwanted bits
\par \hich\af4\dbch\af31505\loch\f4 We want the form (zzzyyyxx)
\par 
\par \hich\af4\dbch\af31505\loch\f4 AND r0, r0, #2_00000011
\par \hich\af4\dbch\af31505\loch\f4 AND r1, r1, #2_00011100
\par \hich\af4\dbch\af31505\loch\f4 AND r2, r2, #2_11100000
\par 
\par \hich\af4\dbch\af31505\loch\f4 OR\tab r0, r0, r1 ; r1 and r0 merges
\par \hich\af4\dbch\af31505\loch\f4 OR\tab r0, r0, r2 ; r2 and r0 merge
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Shift Operations}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 These move bits 1 or more places left or right
\par \hich\af4\dbch\af31505\loch\f4 - "logical shift" inserts a 0 in the vacated position
\par 
\par \hich\af4\dbch\af31505\loch\f4 - "Arithmetic Shift" replicates a sign-bit during a right shift
\par 
\par \hich\af4\dbch\af31505\loch\f4 - "Circular Shift" treats register as "ring" and bits are shifted "around" the ring
\par 
\par \hich\af4\dbch\af31505\loch\f4 - "Extended Shift" includes carry register in shift\hich\af4\dbch\af31505\loch\f4  path (basically a circular shift with an extra bit)
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Implementing Shift Operation on ARM}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Its possible to shift the 2nd operand in data processing operations before it is used
\par \hich\af4\dbch\af31505\loch\f4 i.e.
\par \hich\af4\dbch\af31505\loch\f4 ADD r0, r1, r2, LSL #1 (logical shift left)
\par \hich\af4\dbch\af31505\loch\f4 - Logical shift left is appli\hich\af4\dbch\af31505\loch\f4 ed to r2 before they're added to r1
\par \tab \hich\af4\dbch\af31505\loch\f4 - Means: [r0] <- [r1] + [r2] x 2
\par 
\par \hich\af4\dbch\af31505\loch\f4 Or we can do
\par \hich\af4\dbch\af31505\loch\f4 - MOVE r3, r3 LSL #1 (which is just doing a shift)
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Dynamic Shifts:}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 MOV r4, r3, LSL r1 (moves contents of r3 by value in r1 before storing in r4)
\par \hich\af4\dbch\af31505\loch\f4 - Useful for IEEE arithmetic if we want to normalize an exponent
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 ARM Implements 5 shifts}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - LSL (logical shift left)
\par \hich\af4\dbch\af31505\loch\f4 - LSR (logical shift right)
\par \hich\af4\dbch\af31505\loch\f4 - ASR (arithmetic shift right)
\par \hich\af4\dbch\af31505\loch\f4 - ROR (rotate right)
\par \hich\af4\dbch\af31505\loch\f4 - RRX (rotate right through carry) - once
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 ARM's Data Proce\hich\af4\dbch\af31505\loch\f4 ssing Instructions}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Bit 25 determines whether the 2nd operand is a immediate shift, dynamic shift, or literal operand
\par \hich\af4\dbch\af31505\loch\f4 - 0 is Shift, and bit 4 determines whether immediate or dynamic
\par \hich\af4\dbch\af31505\loch\f4 - 1 is treat operand 2 as literal operand
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Unconditional Branch}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 form:
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 B}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 
\b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 t\hich\af4\dbch\af31505\loch\f4 arget}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Target denotes BTA (branch target address)
\par 
\par \hich\af4\dbch\af31505\loch\f4 Suppose we have code:
\par \hich\af4\dbch\af31505\loch\f4 IF (x == y)
\par \tab \hich\af4\dbch\af31505\loch\f4 THEN Y = Y+1;
\par \tab \hich\af4\dbch\af31505\loch\f4 ELSE Y = Y+2;
\par 
\par \hich\af4\dbch\af31505\loch\f4 The test (IF) is performed, and there are 2 options possible for the runtime
\par 
\par \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 CMP r1, r2\tab \tab \tab ; compares the both
\par \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 BNE\tab Plus2\tab \tab \tab ; Bran\hich\af4\dbch\af31505\loch\f4 ch upon NOT EQUAL, to plus 2
\par \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 ADD r1, r1,#1\tab \tab ; Else, add 1
\par \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 Branch leave\tab \tab \tab ; skip the Plus 2
\par \hich\af4\dbch\af31505\loch\f4 Plus2\tab ADD r1, r1, #2\tab \tab ; Else add2
\par \hich\af4\dbch\af31505\loch\f4 leave\tab \hich\f4 \'85\tab \tab \tab \tab \tab \tab \tab \loch\f4 ; continue from here
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Conditional Branch}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 test the instruction's flag bits in the processor's condition code reg\hich\af4\dbch\af31505\loch\f4 ister
\par \hich\af4\dbch\af31505\loch\f4 - There are 4 flags, thus 2^4 = 16 possible conditions
\par \hich\af4\dbch\af31505\loch\f4 - There are 8 possible condition branches based on (Z,N,C,V)
\par \tab \hich\af4\dbch\af31505\loch\f4 - 4 Branch on }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 true}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \tab \hich\af4\dbch\af31505\loch\f4 - 4 Branch on }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 false}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Branching & Loop Constructs}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Classic loop constructs are located at core of programming
\par \hich\af4\dbch\af31505\loch\f4 - \hich\af4\dbch\af31505\loch\f4 I.e. FOR, WHILE and UNTIL loops
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 For Loop}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 MOV\tab r0, #10\tab \tab ;
\par \hich\af4\dbch\af31505\loch\f4 Loop\tab \tab \tab \hich\f4 code \'85\tab \tab \tab \tab \loch\f4 ;
\par \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 SUBS\tab r0,r0, #1\tab ; decrement counter, set flags
\par \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 BNE\tab Loop\tab \tab \tab \tab ; continue loop until zero
\par \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 Post loop\tab \hich\f4 \'85.\tab \tab \loch\f4 ; stop on zero count\tab 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Conditional Execution}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Each instruction is conditionally executed in ARM
\par \hich\af4\dbch\af31505\loch\f4 - Instructions are associated with a logical condition 
\par \tab \hich\af4\dbch\af31505\loch\f4 - If a certain condition is true, it is executed
\par \tab \hich\af4\dbch\af31505\loch\f4 - Otherwise, the condition is }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 annulled/squashed}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  or }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 bypassed}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Programmer indicates conditional ex\hich\af4\dbch\af31505\loch\f4 ecution mode, by adding a certain condition to a operation
\par \hich\af4\dbch\af31505\loch\f4 i.e.
\par \hich\af4\dbch\af31505\loch\f4 ADD}{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 EQ}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  r1, r2, r3
\par \hich\af4\dbch\af31505\loch\f4 - This specifies that addition is only performed if z-bit is 1
\par 
\par \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Branch and Shift}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 fields of an instruction are independent
\par \hich\af4\dbch\af31505\loch\f4 - i.e. ADD}{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 CC}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  r1, r2, r3, LSL r4

\par \tab \hich\af4\dbch\af31505\loch\f4 -IF C = 0, then do\hich\af4\dbch\af31505\loch\f4  everything afterwards
\par 
\par \hich\af4\dbch\af31505\loch\f4 - ARM's conditional execution makes it easy to implement conditional operations
\par \hich\af4\dbch\af31505\loch\f4 - i.e. you can implement a condition without branching
\par \hich\af4\dbch\af31505\loch\f4 - You can also chain multiple conditions together
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Addressing Modes}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 ADD }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 r0}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 , r1, #Q\tab \tab \tab \tab 
; }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Literal}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 , \hich\af4\dbch\af31505\loch\f4 adds Q to r1
\par 
\par \hich\af4\dbch\af31505\loch\f4 LDR }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 r0}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 , Mem\tab \tab \tab \tab ; }{
\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Absolute}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
: Loads memory contents from (Mem) into r0 (not supported by ARM)
\par 
\par \hich\af4\dbch\af31505\loch\f4 LDR }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 r0}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 , [r1]\tab \tab \tab \tab 
\tab ; }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Register Indirect}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 : Load r0 with contents of memory at r1

\par \tab \hich\af4\dbch\af31505\loch\f4 - Can also have Register Indirect }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 With Offset (Variable Offset)}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 
\par \tab \hich\af4\dbch\af31505\loch\f4 - Or Reg\hich\af4\dbch\af31505\loch\f4 ister Indirect with }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Program Counter Relative}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  (Literal Offset)
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 ARM}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  lacks simple memory direct (absolute) 
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Handling Literals}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - ARM uses literal operands
\par \hich\af4\dbch\af31505\loch\f4 - Literals are }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 12 bit}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  values, from 
}{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 0}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  to }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4 4095}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Can be scaled by a factor of 2**
\par \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 represented if bit 25}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  is }{
\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 1}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \tab \hich\af4\dbch\af31505\loch\f4 - Thus, }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 bits}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  11-8 are  }{
\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 alignment}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 7-0}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  are }{\rtlch\fcs1 
\ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 8 bit intermediate value}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Register Indirect Addressing}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Is when location of operand is given by contents of register (i.e. pointer) (or indexed)
\par \tab \hich\af4\dbch\af31505\loch\f4 - Pointer points to a location }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 n}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  i\hich\af4\dbch\af31505\loch\f4 n memory
\par \tab \hich\af4\dbch\af31505\loch\f4 - Indirect addressing is shown by }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 square brackets}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  [r0]
\par 
\par \hich\af4\dbch\af31505\loch\f4 i.e.
\par 
\par \hich\af4\dbch\af31505\loch\f4 LDR r1, [r0]\tab ; loads r1 with contents of memory location pointed at by r0
\par 
\par \hich\af4\dbch\af31505\loch\f4 What if we write
\par \hich\af4\dbch\af31505\loch\f4 ADD r0, r0, #4\tab ; Increments pointer by 4
\par \tab \hich\af4\dbch\af31505\loch\f4 - It points to next location in memory now; implem\hich\af4\dbch\af31505\loch\f4 enting this lets us access sequence of memory locations
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Register Indirect Addressing with Offset}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - ARM supports memory-addressing where }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 effective address}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  of operand is found by adding }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 register contents}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  with a }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 literal offset}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 (PC counter relative)
\par \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Base plus Displacement Addressing}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Since offset is constant, it is not changed at runtime 
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Register Indirect Addressing with Base/Index Registers}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Specifying offset as 2nd register, we can make a dynamic offset
\par \hich\af4\dbch\af31505\loch\f4 i.e.
\par 
\par \hich\af4\dbch\af31505\loch\f4 LDR r2, [r0, r1]\tab \tab ; Load r2 with lo\hich\af4\dbch\af31505\loch\f4 cation pointed at by r0 + r1
\par 
\par \hich\af4\dbch\af31505\loch\f4 LDR r2, [r0, r1, LSL #2]\tab ; Load r2 with r0 + 4x r1
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Autoindexing Pre-Indexing}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  (Register Indirect w/ Constant/Literal)

\par \hich\af4\dbch\af31505\loch\f4 - Elements in an array are usually accessed sequentially
\par \hich\af4\dbch\af31505\loch\f4 - Auto-indexing addressing modes is when pointer po\hich\af4\dbch\af31505\loch\f4 ints to next element }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 before}{\rtlch\fcs1 
\af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  or }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 after}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  its used 
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 ARM}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  implements 2 auto indexing modes by adding }{\rtlch\fcs1 
\ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 offset}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  to the base (Literal Offset)
\par \hich\af4\dbch\af31505\loch\f4 - Pre-indexing is adding "!" to effective address
\par 
\par \hich\af4\dbch\af31505\loch\f4 LDR }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 r0}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 , [r1, #8]!\tab \tab 
; Loads r0 with word pointed at r1 plus 8, Pointer is u\hich\af4\dbch\af31505\loch\f4 pdated afterwards
\par \tab \hich\af4\dbch\af31505\loch\f4 - Access memory 8 bytes beyond base register }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 r1}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4 , }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 then upgrade the base register (pointer)}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  
\par \tab \hich\af4\dbch\af31505\loch\f4 - Pointer plays catchup
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Autoindexing Post-Indexing}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Addresses operand at location pointed at by }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 base register}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4 , then increments }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 base register}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 i.e.
\par 
\par \hich\af4\dbch\af31505\loch\f4 LDR }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 r0}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 , [r1], #8\tab 
; loads r0 with word pointed at by r1, and then add 8 to r1
\par \hich\af4\dbch\af31505\loch\f4 - Put the offset }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 outside}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  the square

\par \hich\af4\dbch\af31505\loch\f4 - Pointer leads 
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Subroutine Call/Return}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - When processor "branches into subroutine instruction"
\par \hich\af4\dbch\af31505\loch\f4 - Address of next instruction is saved i\hich\af4\dbch\af31505\loch\f4 n a save spot
\par \tab \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 PC}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 is loaded with address of 1st instruction in subroutine
\par \hich\af4\dbch\af31505\loch\f4 - At return from subroutine instruction, processor returns to point following subroutine call
\par 
\par \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 ARM}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 processors don't provide fully automatic subroutine call/return
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - Branch with\hich\af4\dbch\af31505\loch\f4  Link (BL) instruction saves return address in r14 (lr)
\par \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Bit 24}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 indicates branch/branch with link
\par \tab \hich\af4\dbch\af31505\loch\f4 - 0 is branch
\par \tab \hich\af4\dbch\af31505\loch\f4 - 1 is branch with link
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 ARM Support For Subroutines}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - BL (Branch with Link) behaves like B (Branch) but copies return address (address of n\hich\af4\dbch\af31505\loch\f4 ext instruction to be executed) into }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4 r14}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Also copies PC held in }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 r15}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  into }
{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 r14}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Return by copying r14 return address to }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 PC}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 i.e.
\par 
\par \hich\af4\dbch\af31505\loch\f4 MOV pc, lr \tab \tab ; OR write }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 MOV}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 r15}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 , r14
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 The Stack}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Stack is a data structure, LIFO
\par \hich\af4\dbch\af31505\loch\f4 - Stacks are implemented using }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 stack pointers}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  (that point to the top of the stack)
\par \hich\af4\dbch\af31505\loch\f4 - Pushing items moves the stack pointer up
\par \hich\af4\dbch\af31505\loch\f4 - Popping items moves the stack pointer down
\par 
\par \hich\af4\dbch\af31505\loch\f4 Must decide if:
\par \hich\af4\dbch\af31505\loch\f4 - Stack grows up towards low memory
\par \hich\af4\dbch\af31505\loch\f4 or
\par \hich\af4\dbch\af31505\loch\f4 - Stack grows down towards high memory
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 TOS}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  indicates top of\hich\af4\dbch\af31505\loch\f4 
 stack, and is the next item on stack
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 Possible Stack Structures
\par }{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 A) Stack Grows UP
\par \hich\af4\dbch\af31505\loch\f4 - Pointer points at }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 TOS}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 (Successive spaces are n-4)
\par \hich\af4\dbch\af31505\loch\f4 - i.e. Return address pushed on stack during subroutine call
\par \hich\af4\dbch\af31505\loch\f4 - Return address popped after a RTS instruction
\par \hich\af4\dbch\af31505\loch\f4 B) Stack Gr\hich\af4\dbch\af31505\loch\f4 ows Up
\par \hich\af4\dbch\af31505\loch\f4 - Pointer points at space ABOVE }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 TOS}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par 
\par \hich\af4\dbch\af31505\loch\f4 C) Stack Grows Down 
\par \hich\af4\dbch\af31505\loch\f4 - Pointer points at }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 TOS}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 (Successive spaces are n+4)
\par \hich\af4\dbch\af31505\loch\f4 D) Stack Grows Down
\par \hich\af4\dbch\af31505\loch\f4 - Pointer points to space BELOW }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 TOS}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Stacks are used to save return addresses 
\par \hich\af4\dbch\af31505\loch\f4 RISC programmers force programmer to maintain stack
\par \hich\af4\dbch\af31505\loch\f4 CISC processors maintain stack automatically
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Subroutine Call/Return}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Implemented by pushing a return address on the stack
\par \hich\af4\dbch\af31505\loch\f4 - Then jumping to branch target address
\par \hich\af4\dbch\af31505\loch\f4 - Could be implemented in }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 ARM}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 using:
\par 
\par \hich\af4\dbch\af31505\loch\f4 A\hich\af4\dbch\af31505\loch\f4 ssuming it grows towards LOW
\par \hich\af4\dbch\af31505\loch\f4 - Pointer points at next item on stack, not the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 TOS}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  (Situation D)
\par 
\par \hich\af4\dbch\af31505\loch\f4 SUB\tab r13, r13, #4\tab ;Decrement stack pointer
\par \hich\af4\dbch\af31505\loch\f4 STR\tab r15, [r13]\tab \tab ; push return address on stack
\par \hich\af4\dbch\af31505\loch\f4 B\tab Target\tab \tab \tab \tab ; jump to target address
\par \tab \tab \tab \tab \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 ; return
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 RTS}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  is a }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 
\b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 return f\hich\af4\dbch\af31505\loch\f4 rom subroutine}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  instruction, and }{\rtlch\fcs1 \ab\af4\afs36 
\ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 PC}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  returns to where it was beforehand
\par \hich\af4\dbch\af31505\loch\f4 i.e.
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 RTS:}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \tab \hich\af4\dbch\af31505\loch\f4 [PC] <- [[SP]]\tab \tab 
; Copy return address from Stack to PC
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 [SP] <-\tab [SP] +4\tab ; Adjust stack pointer
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Nested Subroutines}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  are also possible 
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Leaf Routines}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Leaf routines don't call another routine
\par \hich\af4\dbch\af31505\loch\f4 - They are at the end of a tree
\par \hich\af4\dbch\af31505\loch\f4 - r14 saves return address if you call a leaf routine with a }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 BL 
\par }{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - If routine is not }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 leaf routine}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
, another routine can't be called until saving the link register
\par \hich\af4\dbch\af31505\loch\f4 i.e.
\par 
\par \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 BL\tab XYZ\tab \tab \tab \tab \tab \tab ; Call leaf routine
\par \tab \tab \tab .
\par \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 BL\tab XYZ1\tab \tab \tab \tab \tab ; call routine that calls nested routine
\par \tab \tab \tab .
\par \hich\af4\dbch\af31505\loch\f4 XYZ\tab \tab \hich\f4 \'85\tab \tab \tab \tab \tab \tab \tab \tab \tab \loch\f4 ; leaf routine 
\par \tab \tab \tab .
\par \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 MOV\tab pc,lr\tab \tab \tab \tab \tab \tab ; link register is copied into PC and returned to
\par \hich\af4\dbch\af31505\loch\f4 XYZ1\tab STMFD\tab sp!, \{r0-r4,lr\}\tab \tab ;Save working registers\hich\af4\dbch\af31505\loch\f4  and link register
\par \tab \tab \tab .
\par \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 BL\tab XYZ\tab \tab \tab \tab \tab \tab ; call xYZ- overwrites old link register
\par \tab \tab \tab .\tab \tab \tab \tab \tab \tab \tab \tab \tab 
\par \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 LDMFD\tab sp!,\{r0-r4,pc\}\tab \tab ; restore registers and force return
\par 
\par \hich\af4\dbch\af31505\loch\f4 XYZ is leaf subroutine; it doesn\hich\f4 \rquote \loch\f4 t call a nested subroutine
\par \tab \hich\af4\dbch\af31505\loch\f4 - We don\hich\f4 \rquote \loch\f4 t have to worry about link re\hich\af4\dbch\af31505\loch\f4 gister, }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 r14}{\rtlch\fcs1 
\af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 , and can return by executing MOV
\par 
\par \hich\af4\dbch\af31505\loch\f4 Saving a link register includes pushing it to the stack
\par \hich\af4\dbch\af31505\loch\f4 - This way, we can store multiple registers instruction (and r0-r4)
\par \hich\af4\dbch\af31505\loch\f4 - Returning from XYZ1, we can restore registers and load saved r14
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Data Organization and Endianism}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Bytes in memory are numbered from 0 to 2^(n-1)
\par \hich\af4\dbch\af31505\loch\f4 - Word numbering is universal
\par \hich\af4\dbch\af31505\loch\f4 - Bit numbering can vary, some are left to right, some are right to left
\par 
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 ARM}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  numbers with least significant bit on right
\par 
\par \hich\af4\dbch\af31505\loch\f4 We can number the byt\hich\af4\dbch\af31505\loch\f4 es of a word in 2 ways:
\par \hich\af4\dbch\af31505\loch\f4 - MSB can be on the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 highest}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 byte (n + x)
\par \tab \hich\af4\dbch\af31505\loch\f4 - Big endian
\par \tab \hich\af4\dbch\af31505\loch\f4 i.e. In a fictional 8 bit register:
\par \tab \hich\af4\dbch\af31505\loch\f4 - (}{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 7}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  6 5 4 3 2 1 0)
\par \tab \hich\af4\dbch\af31505\loch\f4 - MSB is }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 7}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 , because it
\hich\f4 \rquote \loch\f4 s the highest bit
\par 
\par \hich\af4\dbch\af31505\loch\f4 - MSB can be on }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 lowest}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  byte (n)

\par \tab \hich\af4\dbch\af31505\loch\f4 - Little endian
\par \tab \hich\af4\dbch\af31505\loch\f4 - i.e. in a fictional 8 bi\hich\af4\dbch\af31505\loch\f4 t register:
\par \tab \hich\af4\dbch\af31505\loch\f4 - (7 6 5 4 3 2 1 0)
\par \tab \hich\af4\dbch\af31505\loch\f4 - MSB is }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 0}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 , because it\hich\f4 \rquote \loch\f4 
s the lowest bit 
\par 
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Block Move Instructions}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 ARM\hich\f4 \rquote \loch\f4 s block supports 4 possible stack modes
\par \hich\af4\dbch\af31505\loch\f4 DF = A) Grows towards low memory (Pointer points at top/full) (Descend/Full)
\par \hich\af4\dbch\af31505\loch\f4 AF = B) Grows towards high memory (Pointer points at top/full) (Ascend/Full)
\par \hich\af4\dbch\af31505\loch\f4 DE = C) Grows towards low memory (Pointer points at empty) (Descend/Empty)
\par \hich\af4\dbch\af31505\loch\f4 AE = D) Grows towards high memory (Pointer points at empty) (Ascend/Empty)
\par 
\par \hich\af4\dbch\af31505\loch\f4 ARM has 2 ways of describing\hich\af4\dbch\af31505\loch\f4  stacks
\par \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 What}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  it does vs }{\rtlch\fcs1 
\ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 How}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  it does it
\par \hich\af4\dbch\af31505\loch\f4 - Most popular is }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 full descending stack}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4   (FD)
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 STMFD}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  sp!, \{r0,r1\} when pushing r0 and r1 onto stack
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 LDMFD}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  sp!, \{r0, r1\} when popping r0 and r1 off stack
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 FD}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  stack is implemented by decrementing pointer and storing d
\hich\af4\dbch\af31505\loch\f4 ata at that address
\par \hich\af4\dbch\af31505\loch\f4 - Or by reading data at stack address, and then incrementing pointer
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Block Move Instruction Application }{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Saving registers on entering subroutine, and restoring registers before exiting subroutine
\par \hich\af4\dbch\af31505\loch\f4 - Reduce size of code, because MOV is\hich\af4\dbch\af31505\loch\f4  redundant
\par \hich\af4\dbch\af31505\loch\f4 - If we wanna move registers from a stack, we can also include the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 PC}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - At beginning of subroutine, we push r14 containing return address, and then at the end, pop the saved registers
\par 
\par \hich\af4\dbch\af31505\loch\f4 BLOCK provides a convenient mean of copying data between memory regions
\par \hich\af4\dbch\af31505\loch\f4 - i.e. copy 256 words from Table1 to Table 2
\par \hich\af4\dbch\af31505\loch\f4 We can move 8 registers at once
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 P.189 inclusive END FOR MIDTERM}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  }{\rtlch\fcs1 \ab\af4\afs36 
\ltrch\fcs0 \b\f4\fs36\insrsid1067391 
\par }{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 Last lecture
\par \hich\af4\dbch\af31505\loch\f4 Recall: first 4 bits in register are condition flags
\par 
\par \hich\af4\dbch\af31505\loch\f4 If I \hich\af4\dbch\af31505\loch\f4 want to implement a BL instruction:
\par 
\par \hich\af4\dbch\af31505\loch\f4 CMP\tab r9, r4\tab \tab ; if r9 < r4
\par \hich\af4\dbch\af31505\loch\f4 BLLT\tab ABC\tab \tab ; Branch with return if less than
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 The Stack}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par 
\par \hich\af4\dbch\af31505\loch\f4 RTL for a AF
\par \hich\af4\dbch\af31505\loch\f4 Increment data pointer, Push data
\par 
\par \hich\af4\dbch\af31505\loch\f4 RTL for a AE
\par \hich\af4\dbch\af31505\loch\f4 Data is placed, stack pointer adjusted second*
\par 
\par \hich\af4\dbch\af31505\loch\f4 RTL for a DF
\par \hich\af4\dbch\af31505\loch\f4 Increment Data \hich\af4\dbch\af31505\loch\f4 pointer, Push Data
\par 
\par \hich\af4\dbch\af31505\loch\f4 RTL for DE
\par \hich\af4\dbch\af31505\loch\f4 Data placed, Stack pointer Adjusted
\par 
\par \hich\af4\dbch\af31505\loch\f4 What are 2 issues that need to be addressed?
\par \hich\af4\dbch\af31505\loch\f4 Stack up towards low memory address, or up to high memory address?
\par \hich\af4\dbch\af31505\loch\f4 Should I start at top of memory and reduce, or start at bottom to up
\par 
\par \hich\af4\dbch\af31505\loch\f4 It\hich\f4 \rquote \hich\af4\dbch\af31505\loch\f4 s easier to AF or AE, because you can use your array in the beginning
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Subroutine Call and Return}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Implemented by pushing return address from stack, and jumping to branch target address}{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  }{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Usually implemented by CISC
\par 
\par \hich\af4\dbch\af31505\loch\f4 ARM doesn\hich\f4 \rquote \loch\f4 t support stack-based subr\hich\af4\dbch\af31505\loch\f4 outine mechanism
\par \hich\af4\dbch\af31505\loch\f4 You need to do a
\par \hich\af4\dbch\af31505\loch\f4 LDR r12, [r13], # +4 (slide 110)  ; r13 points to stack, contents of stack are stored in r12, and then incremented by 4\tab \tab \tab \tab \tab \tab \tab \tab \tab \tab ; placed in memory
\par \hich\af4\dbch\af31505\loch\f4 and 
\par \hich\af4\dbch\af31505\loch\f4 SUB r15, r12, #4\tab \tab \tab \tab \tab ; because of pipelining, arm instructions are st\hich\af4\dbch\af31505\loch\f4 ored 8 bytes ahead, thus we subtract 4
\par 
\par \hich\af4\dbch\af31505\loch\f4 All calculations must occur outside of the PC, before being stored inside it ** ensures proper return to program execution
\par \hich\af4\dbch\af31505\loch\f4 Link Register doesn\hich\f4 \rquote \loch\f4 t work in nested subroutines ** Because of the multiple returns
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 ARM\hich\f4 \rquote \loch\f4 s Lo\hich\af4\dbch\af31505\loch\f4 ad and Store Encoding}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 31-28   27-26      25     24     23     22      21     20    19-16    15-12    11-0
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Bit 25:}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  Determines Dynamic or Static shift
\par \tab \hich\af4\dbch\af31505\loch\f4 - 0 = Interpret operand as }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 constant value}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  
\par \tab \hich\af4\dbch\af31505\loch\f4 - 1 = Register based offset (}{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - 11-7}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  specifies shift length
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 6-5}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  specifies type

\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 4 = Determines if static/Dynamic Shift}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \tab \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 - 0 determines shift with static (31-0)
\par \tab \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 register specified shift}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 3-0}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 specifies the register
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Bit 24:}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  Indicates the type of }{\rtlch\fcs1 \ab\af4\afs36 
\ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 increment}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \tab \hich\af4\dbch\af31505\loch\f4 - 0 = post index\hich\af4\dbch\af31505\loch\f4  (use the pointer, then adjust) [_] , _
\par \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 - Post index is dealing with memory element, BEFORE incrementing
\par \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 - Looks at }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 [r1]}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 and then stores }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 [r1] + d}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \tab \hich\af4\dbch\af31505\loch\f4 - 1 = pre index (adjust pointer, then use pointer) [_, _] 
\par \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 - Pre index is INCREMENTING POINTER, and\hich\af4\dbch\af31505\loch\f4  then accessing memory element 
\par \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 - Looks at }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 [r1] + d}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 and then stores }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 [r1] + d}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Bit 23:}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  indicates the pointer direction
\par \tab \hich\af4\dbch\af31505\loch\f4 - 0 = decrements pointer
\par \tab \hich\af4\dbch\af31505\loch\f4 - 1 = increments pointer
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Bit 22:}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  indicates the operand size
\par \tab \hich\af4\dbch\af31505\loch\f4 - 0 = word address
\par \tab \hich\af4\dbch\af31505\loch\f4 - 1 = byte access
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Bit 21:}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  Updates the pointer or not?
\par \tab \hich\af4\dbch\af31505\loch\f4 - 0 = no
\par \tab \hich\af4\dbch\af31505\loch\f4 - 1 = yes
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Bit 20:}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  Direction of Data
\par \tab \hich\af4\dbch\af31505\loch\f4 - 0 = store
\par \tab \hich\af4\dbch\af31505\loch\f4 - 1 = load
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Bit 19-16:}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 Base register (the one that comes directly after the op code)
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Bit 15-12:}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  Destination/Source register
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Bit 11-0}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  : Represents a 12 bit op\hich\af4\dbch\af31505\loch\f4 
erand 2, or a 12 bit literall
\par 
\par }{\rtlch\fcs1 \ab\af4\afs56 \ltrch\fcs0 \b\f4\fs56\ul\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 CHAPTER 4}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par 
\par \hich\af4\dbch\af31505\loch\f4 Instruction Set }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Architectures }{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 What }{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 a computer does
\par \hich\af4\dbch\af31505\loch\f4 - Stack and Architectural support for Subroutines and Parameter passing
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 RISC}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Abandoned complex Instruction formats
\par \hich\af4\dbch\af31505\loch\f4 - Threw away lesser used instructions/addressing modes
\par \hich\af4\dbch\af31505\loch\f4 - Used large register sets
\par \hich\af4\dbch\af31505\loch\f4 - Permitted 2 memory based operations; }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 load}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  and }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 store}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par 
\par \hich\af4\dbch\af31505\loch\f4 - Introduced }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 pipelining}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
, which is overlapping of instruction execution
\par \tab \hich\af4\dbch\af31505\loch\f4 - When one instruction is read\hich\af4\dbch\af31505\loch\f4 , the next is fetched from memory
\par \tab \hich\af4\dbch\af31505\loch\f4 - Pipelining is possible because of regular instruction formats
\par 
\par \hich\af4\dbch\af31505\loch\f4 - RISC didn\hich\f4 \rquote \loch\f4 t sweep the market in the 1980\hich\f4 \rquote \loch\f4 s because of all the investments made into Intel IA32 
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 The Stack and Data Storage}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Variables can be thought of\hich\af4\dbch\af31505\loch\f4  as abstract data cells;
\par \tab \hich\af4\dbch\af31505\loch\f4 - i.e. byte, array, records
\par \hich\af4\dbch\af31505\loch\f4 - Abstract data cell has all properties of real memory: It can be read from or written to
\par \hich\af4\dbch\af31505\loch\f4 - Variables are assigned a name by programmer
\par \tab \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 BINDING}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 is when we associate the name of a variable with its st\hich\af4\dbch\af31505\loch\f4 orage location
\par \tab \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 SCOPE}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 describes the accessibility or visibility within a program (i.e. local vs global)
\par \hich\af4\dbch\af31505\loch\f4 Fig 4.1
\par \hich\af4\dbch\af31505\loch\f4 - Describes how certain variables are only accessible in certain methods
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Storage and the Stack}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - When a program using dynamic data storage i\hich\af4\dbch\af31505\loch\f4 nvokes a procedure, it\hich\f4 \rquote \loch\f4 s said to }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4 activate}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  the procedure
\par \hich\af4\dbch\af31505\loch\f4 - Associating with each procedure and each invocation of a procedure is an }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 activation record}{\rtlch\fcs1 \af4\afs36 
\ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  conning all info necessary to run the procedure
\par \hich\af4\dbch\af31505\loch\f4 - An activation record can also be described as the procedu\hich\af4\dbch\af31505\loch\f4 re\hich\f4 \rquote \loch\f4 s view of the world
\par \hich\af4\dbch\af31505\loch\f4 - Langauges that support }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 recursion}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 use dynamic storage because amount of storage required changes as program runs
\par \hich\af4\dbch\af31505\loch\f4 - Storage is allocated at }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 runtime}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  

\par 
\par \hich\af4\dbch\af31505\loch\f4 i.e.
\par \hich\af4\dbch\af31505\loch\f4 Example Activation Record:
\par \hich\af4\dbch\af31505\loch\f4 Fig 4.2
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Parameters}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Local Variables}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Return Address}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Link to other Records}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par 
\par \hich\af4\dbch\af31505\loch\f4 - This is also known as a }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 frame}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  

\par \hich\af4\dbch\af31505\loch\f4 - When an }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 activation record/frame}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 is used, executing a return from a procedure }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 deallocates}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
/frees the storage taken up by this }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 record/frame
\par }{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 i.e.
\par \hich\af4\dbch\af31505\loch\f4 X = (A+B) x (C-D)
\par \hich\af4\dbch\af31505\loch\f4 - These expressions need }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 temp stora\hich\af4\dbch\af31505\loch\f4 ge}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 , because (A+B) must be stored somewhere while (C-D) is occurring
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Stack Pointer and Frame Pointer}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 SP}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 : A pointer that always points to the top of the stack
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 FP}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
: Is a pointer that always points to the base of the current stack frame
\par \hich\af4\dbch\af31505\loch\f4 - SP might change duri\hich\af4\dbch\af31505\loch\f4 ng execution, but FP will not change
\par \hich\af4\dbch\af31505\loch\f4 - Data in stack frame can be accessed with respect to the FP or the SP
\par \tab \hich\af4\dbch\af31505\loch\f4 - r11 is used as the FP in ARM by convention
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Stack Frame and Local Variables}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Local Workspace}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 is where temp variables need to go during procedur\hich\af4\dbch\af31505\loch\f4 e executions
\par \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Local}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 means that workspace is private to procedure; and never accessed by anything outside of the procedure
\par \hich\af4\dbch\af31505\loch\f4 - If a procedure is to be used recursively, local variables must be bound up with procedure itself, and with the occasion of its use
\par \tab \hich\af4\dbch\af31505\loch\f4 - i.e. Every time a proc is called, a new workspace is allocated to it
\par \tab \hich\af4\dbch\af31505\loch\f4 - If a procedure is given a fixed workspace, and is interrupted, any data in its fixed locates will be overwritten by the procedure\hich\f4 \rquote \loch\f4 s re-use
\par \hich\af4\dbch\af31505\loch\f4 - For our case, we assume }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 FD}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 memory (Full/\hich\af4\dbch\af31505\loch\f4 Descending)
\par 
\par \hich\af4\dbch\af31505\loch\f4 - Stack helps us implement }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 dynamic allocation}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  of a workspace
\par \hich\af4\dbch\af31505\loch\f4 - Stack frame can be thought of as a region of temp storage at the top of a current stack 
\par \hich\af4\dbch\af31505\loch\f4 Fig 4.3
\par \hich\af4\dbch\af31505\loch\f4 - A }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 n}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
-byte stack frame can be created by moving the stack pointer up by }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 n}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  locations\hich\af4\dbch\af31505\loch\f4  at the beginning of a subroutine 
\par \hich\af4\dbch\af31505\loch\f4 - We always assume }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 FD}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 for our stacks
\par \tab 
\par \hich\af4\dbch\af31505\loch\f4 - As we assume }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 FD}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
, we should DECREMENT the stack pointer to create a stack frame 
\par \hich\af4\dbch\af31505\loch\f4 i.e 
\par \hich\af4\dbch\af31505\loch\f4 SUB\tab r13, r13, #100\tab \tab ; Initializes the Stack Frame
\par 
\par \hich\af4\dbch\af31505\loch\f4 - After we\hich\f4 \rquote \loch\f4 re done with the stack we should
\par 
\par \hich\af4\dbch\af31505\loch\f4 ADD\tab r13, r13, #100\tab \tab ; Collapse the Stack Frame
\par 
\par \hich\af4\dbch\af31505\loch\f4 - We have to }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 balance}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 the stack frame, anything we add to it, we must also take off
\par \hich\af4\dbch\af31505\loch\f4 - When building a stack frame, keep this in mind:
\par \tab \hich\af4\dbch\af31505\loch\f4 - The }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 SP}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 is free to move as info is added to stack
\par \tab \hich\af4\dbch\af31505\loch\f4 - Better to build a s\hich\af4\dbch\af31505\loch\f4 tack frame with a }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Pointer}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  independent of the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 SP}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  
\par \tab \hich\af4\dbch\af31505\loch\f4 - This is where the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Frame Pointer}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  comes in, the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Frame Pointer}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 points to the bottom of the stack frame (is independent of stack pointer)
\par 
\par \hich\af4\dbch\af31505\loch\f4 \hich\f4 - If we wanna create a new stack frame\'85\'85.
\par \hich\af4\dbch\af31505\loch\f4 i.e.
\par 
\par \hich\af4\dbch\af31505\loch\f4 SUB\tab sp, sp, #4\tab \tab ; Move stack pointer up
\par \hich\af4\dbch\af31505\loch\f4 STR\tab fp, [sp]\tab \tab \tab ; Push frame pointer onto stack
\par \hich\af4\dbch\af31505\loch\f4 MOV\tab fp, sp\tab \tab \tab ; Move stack pointer to frame pointer
\par \hich\af4\dbch\af31505\loch\f4 SUB\tab sp, sp, #8\tab \tab ; Move stack pointer up 8 bytes
\par 
\par \hich\af4\dbch\af31505\loch\f4 - FP points to base of frame, and can be used to access variables in \hich\af4\dbch\af31505\loch\f4 the frame
\par \hich\af4\dbch\af31505\loch\f4 - r11 is used as the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 FP}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par 
\par \hich\af4\dbch\af31505\loch\f4 After the subroutine, collapse the stack frame with:
\par 
\par \hich\af4\dbch\af31505\loch\f4 MOV\tab sp, fp\tab \tab ; This restores the old stack pointer
\par \hich\af4\dbch\af31505\loch\f4 LDR\tab fp, [sp]\tab \tab ; Restores the old frame pointer
\par \hich\af4\dbch\af31505\loch\f4 ADD\tab sp, sp, #4\tab ; Moves stack pointer down 4 bytes 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Fig 4.5 and the b\hich\af4\dbch\af31505\loch\f4 ehaviour of the stack frame:
\par \hich\af4\dbch\af31505\loch\f4 How does a stack frame grow?
\par 
\par \hich\af4\dbch\af31505\loch\f4 o
\par \hich\af4\dbch\af31505\loch\f4 x
\par \hich\af4\dbch\af31505\loch\f4 - o represents the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 top}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  of the stack

\par 
\par \hich\af4\dbch\af31505\loch\f4 1) Reserve space on stack for }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 FP}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 with
\par \hich\af4\dbch\af31505\loch\f4 - SUB\tab sp, sp, #4
\par 
\par \hich\af4\dbch\af31505\loch\f4 o
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 x}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 x
\par 
\par \hich\af4\dbch\af31505\loch\f4 2) Save the frame pointer on stack
\par \hich\af4\dbch\af31505\loch\f4 - STR\tab fp, [sp]
\par 
\par \hich\af4\dbch\af31505\loch\f4 o - FP
\par \hich\af4\dbch\af31505\loch\f4 x
\par \hich\af4\dbch\af31505\loch\f4 x
\par 
\par \hich\af4\dbch\af31505\loch\f4 3) New FP points to the base of the stack
\par \hich\af4\dbch\af31505\loch\f4 - MOV\tab fp, sp
\par 
\par \hich\af4\dbch\af31505\loch\f4 o - FP, SP
\par \hich\af4\dbch\af31505\loch\f4 x
\par \hich\af4\dbch\af31505\loch\f4 x
\par 
\par \hich\af4\dbch\af31505\loch\f4 4) Move SP by 8 bytes to create a local workspace
\par \hich\af4\dbch\af31505\loch\f4 - SUB\tab sp, sp, #8
\par 
\par \hich\af4\dbch\af31505\loch\f4 o -SP
\par \hich\af4\dbch\af31505\loch\f4 x
\par \hich\af4\dbch\af31505\loch\f4 x- FP (OLD FRAME POINTER)
\par \hich\af4\dbch\af31505\loch\f4 x
\par \hich\af4\dbch\af31505\loch\f4 x
\par 
\par \hich\af4\dbch\af31505\loch\f4 i.e. How you would set up a stack frame in ARM
\par \hich\af4\dbch\af31505\loch\f4 a) Push register on stack
\par \hich\af4\dbch\af31505\loch\f4 b) Call subroutine
\par \hich\af4\dbch\af31505\loch\f4 c) Save FP and LR
\par \hich\af4\dbch\af31505\loch\f4 d) Create 1 word frame, access parameter
\par \hich\af4\dbch\af31505\loch\f4 e) Return
\par 
\par \hich\af4\dbch\af31505\loch\f4 AREA\tab TestProg, \tab CODE, READONLY
\par \hich\af4\dbch\af31505\loch\f4 ENTRY
\par 
\par \hich\af4\dbch\af31505\loch\f4 Main\tab ADR\tab sp, Stack\tab \tab ; r13 is stack pointer
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 MOV\tab r0, #124\tab \tab ; Dummy parameter in r0
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 MOV\tab fp, #123\tab \tab ; Dummy FP
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 STR\tab r0, [sp,#-4]\tab \hich\af4\dbch\af31505\loch\f4 ; Push Parameter
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 BL\tab \tab Sub\tab \tab \tab ; Call subroutine
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 LDR\tab r1, [sp], #4\tab \tab ; Retrieve Data
\par \hich\af4\dbch\af31505\loch\f4 Loop\tab B\tab Loop\tab \tab \tab \tab 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Sub\tab STMFD\tab sp! \{fp, lr\}\tab ; Stores the frame pointer and link register by pushing to stack
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 MOV\tab \tab fp, sp\tab \tab ; Frame pointer is at bottom of frame
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 SUB\tab \tab sp, sp, \hich\af4\dbch\af31505\loch\f4 #4\tab ; Create stack frame of 1 word
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 LDR\tab \tab r2, [fp, #8]\tab ; Get pushed parameter                 ; Proves that you can access ANY element in stack, so not a true stack
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 ADD\tab \tab r2, r2, #12\tab ; Operate on parameter
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 STR\tab \tab r2, [fp,#-4]\tab ; Store in stack crame
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 ADD\tab \tab sp, sp, #4\tab ; Collapse stack frame
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 LDMFD\tab sp!, \{fp, pc\}\tab ; Restore frame pointer
\par 
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 DCD\tab 0x000\tab ; Unused memory
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 DCD\tab 0x000 
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 DCD\tab 0x000
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 DCD\tab 0x000
\par \hich\af4\dbch\af31505\loch\f4 Stack\tab DCD\tab 0x000
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 END
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Passing Parameters via Stack}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Passing a parameter to a procedure can be done by\hich\af4\dbch\af31505\loch\f4  }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 value}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  or with }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 reference}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \tab \hich\af4\dbch\af31505\loch\f4 - Value is when you copy the actual parameter
\par \tab \hich\af4\dbch\af31505\loch\f4 - Reference is when you pass the address of the parameter
\par 
\par \hich\af4\dbch\af31505\loch\f4 - When passed by }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 value}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
, procedure receives }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 copy}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  of parameter
\par \tab \hich\af4\dbch\af31505\loch\f4 - This is a }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 clone}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
, original value is NOT modified
\par \hich\af4\dbch\af31505\loch\f4 - When passe\hich\af4\dbch\af31505\loch\f4 d by }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 reference}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4 , procedure receives }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 pointer}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 of parameter
\par \tab \hich\af4\dbch\af31505\loch\f4 - If you modify the parameter in the procedure this way, you globally modify the variable
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Exceptions - An Overview}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Exceptions are subroutines inserted into code during }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 runtime}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Use call/return mechanisms similar to subroutines; but call address is supplied by }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 hardware}{\rtlch\fcs1 \af4\afs36 
\ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 ; not specified by programmer
\par \hich\af4\dbch\af31505\loch\f4 - Processors will decode the exception type and then read a }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 pointer}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  that indicates start of exception handling routine
\par \tab \hich\af4\dbch\af31505\loch\f4 - Some proces\hich\af4\dbch\af31505\loch\f4 sors save current status word (and return address) because exceptions shouldn\hich\f4 \rquote \loch\f4 t }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4 alter}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  processor status
\par \hich\af4\dbch\af31505\loch\f4 Some errors include:
\par \tab \hich\af4\dbch\af31505\loch\f4 - Memory Access Errors, OS calls, Illegal instructions, dividing by zero
\par \tab \hich\af4\dbch\af31505\loch\f4 - Exceptions are handled by OS software
\par \hich\af4\dbch\af31505\loch\f4 - Some processors\hich\af4\dbch\af31505\loch\f4  change operating mode during exceptions
\par \tab \hich\af4\dbch\af31505\loch\f4 - These modes can be privileged modes where certain operations are not allowed in order to protect the OS
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Privileged Modes and Exceptions}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Exceptions are events that force computer to stop normal processing and \hich\af4\dbch\af31505\loch\f4 invoke an }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
exception handler}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  (part of the OS) to deal with the exception
\par \hich\af4\dbch\af31505\loch\f4 \hich\f4 - At any given moment the ARM processor is operating in a certain \'93\loch\f4 \hich\f4 mode\'94
\par \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 5 low-order bits}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  of }{
\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 CPSR}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  define the current mode
\par \tab \hich\af4\dbch\af31505\loch\f4 - Normal operating mode is }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 user}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  mode
\par \tab \hich\af4\dbch\af31505\loch\f4 - Switching between m\hich\af4\dbch\af31505\loch\f4 odes occurs when interrupts/exceptions occur
\par \tab \hich\af4\dbch\af31505\loch\f4 \hich\f4 - Each \'93\loch\f4 \hich\f4 mode\'94\loch\f4  has its own SPSR (saved program status register) that stores the current CPSR when exception happens
\par \hich\af4\dbch\af31505\loch\f4 - When exception switches in new registers r13 and r14, the new }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 register set/bank}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  is indicated \hich\af4\dbch\af31505\loch\f4 by Table 4.1
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 During exception handling:}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 i) Arm completes current instruction (if this instruction isn\hich\f4 \rquote \loch\f4 t the one that caused the exception)
\par \hich\af4\dbch\af31505\loch\f4 ii) Operating }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 mode}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 is switched to mode corresponding to the exception
\par \tab \hich\af4\dbch\af31505\loch\f4 i.e. Interruption would invoke IRQ mode
\par \hich\af4\dbch\af31505\loch\f4 iii)\hich\af4\dbch\af31505\loch\f4  Address of instruction following the point where exception occurred is copied onto r14 (}{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 BL}
{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  saves into }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 LR}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 )
\par \tab \hich\af4\dbch\af31505\loch\f4 - Exception is treated as subroutine call
\par \tab \hich\af4\dbch\af31505\loch\f4 - Return address is preserved in link register
\par \hich\af4\dbch\af31505\loch\f4 iv) Current value of CPSR is saved in SPSR of new mode
\par \tab \hich\af4\dbch\af31505\loch\f4 - Necessary to save CPSR because exception must not modify processor status
\par \hich\af4\dbch\af31505\loch\f4 - Interrupt requests are disabled by setting }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 bit 7}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  of CPSR
\par \tab }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Fast Interrupt Requests}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  are disabled by setting }{
\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 bit 6}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Every location in table contains instruction that is executed \hich\af4\dbch\af31505\loch\f4 first in the exception handling routine 
\par \tab \hich\af4\dbch\af31505\loch\f4 - Usually a branch operation
\par \tab \hich\af4\dbch\af31505\loch\f4 - Loads PC with address of corresponding current exception handler
\par \hich\af4\dbch\af31505\loch\f4  
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Table 4.2}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 defines memory locations accessed by ARM processor exeptions
\par \hich\af4\dbch\af31505\loch\f4 - Each location contains first instruction o\hich\af4\dbch\af31505\loch\f4 f appropriate exception handlers
\par \tab \hich\af4\dbch\af31505\loch\f4 - Table is in }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 read only memory}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 
\par \hich\af4\dbch\af31505\loch\f4 - After dealing with the exceptions, we must resume program operation
\par \tab \hich\af4\dbch\af31505\loch\f4 - UNLESS it was a fatal exception
\par \hich\af4\dbch\af31505\loch\f4 - To return from exception, restore the PC and the CPSR from the SPSR
\par 
\par \hich\af4\dbch\af31505\loch\f4 - However, if \hich\af4\dbch\af31505\loch\f4 you just restore PC, then you\hich\f4 \rquote \loch\f4 re still in exception handling mode
\par \hich\af4\dbch\af31505\loch\f4 - But if you restore processor status first, you lose the CPSR
\par 
\par \hich\af4\dbch\af31505\loch\f4 As a result,
\par \hich\af4\dbch\af31505\loch\f4 - You can\hich\f4 \rquote \loch\f4 t use }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 normal}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  sequence of operations to return from an exception as it involves a change of operationg m\hich\af4\dbch\af31505\loch\f4 ode
\par 
\par \hich\af4\dbch\af31505\loch\f4 There are }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 2}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  exception return mechs:

\par \hich\af4\dbch\af31505\loch\f4 1) When the return address is stored in }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 banked}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  r14, and
\par \hich\af4\dbch\af31505\loch\f4 2) When the return address has been pushed off the stack
\par \hich\af4\dbch\af31505\loch\f4 - Return mechs really depend on the exception being handled
\par 
\par \hich\af4\dbch\af31505\loch\f4 1) To return from type 1) exception
\par \hich\af4\dbch\af31505\loch\f4 a) Use MOVS and SUBS 
\par \tab \hich\af4\dbch\af31505\loch\f4 - To modify the value of pc when returning from IRQ or FIQ\tab \tab - Wind back PC by 4
\par \tab \hich\af4\dbch\af31505\loch\f4 - When returning from a Data Abort
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - Wind back PC by 8
\par 
\par \hich\af4\dbch\af31505\loch\f4 2) To return from exception that has been pushed off stack,
\par \hich\af4\dbch\af31505\loch\f4 a) LDMFD }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 sp!}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 , \{r0-r4, pc\}^
\par \tab \hich\af4\dbch\af31505\loch\f4 - The \loch\af4\dbch\af31505\hich\f4 \'93\loch\f4 \hich\f4 ^\'94\loch\f4  denotes a restore CPSR command
\par \tab \hich\af4\dbch\af31505\loch\f4 - PC is not modified at point where it was restored
\par \tab \hich\af4\dbch\af31505\loch\f4 - PC MUST BE MODIFIED BEFORE PUSHING IT ONTO STACK
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 MIPS: Another RISC}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - MIPS is RISC architecture to exploit RISC in a 32 bit processor
\par \hich\af4\dbch\af31505\loch\f4 - Gone through several genera\hich\af4\dbch\af31505\loch\f4 tions and available in 64 bit architecture
\par \hich\af4\dbch\af31505\loch\f4 - MIPS is in range of mobile applications and some games system
\par \hich\af4\dbch\af31505\loch\f4 - MIPS has classic 32 bit load/store ISA and 32GP registers
\par \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 r0}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 is unusual, because it holds an unchangeable constant 0
\par \hich\af4\dbch\af31505\loch\f4 - Allows easy access to 0, a\hich\af4\dbch\af31505\loch\f4 nd ability suppress a register in an instruction
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 3 MIPS Instruction Formats:}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 R-type: Register to Register
\par \hich\af4\dbch\af31505\loch\f4 I-type: Literal Operands
\par \hich\af4\dbch\af31505\loch\f4 J-type: Direct Jump Instructions
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 R-type}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 Provides R-R data processing operations
\par \tab \hich\af4\dbch\af31505\loch\f4 - MIPS can specify 1 of 32 registers; ARM has only 16
\par \hich\af4\dbch\af31505\loch\f4 - MIPS lacks conditional execution and shifting of second operand
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 I-type}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Concatenates 3 fields from R-type instruction to create 16-bit literal field
\par \tab \hich\af4\dbch\af31505\loch\f4 - This provides constants in operations like }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 a\hich\af4\dbch\af31505\loch\f4 dd immediate}{\rtlch\fcs1 \af4\afs36 
\ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  or }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 offset}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  in register indirect operations
\par \hich\af4\dbch\af31505\loch\f4 - Literal can be signed/unsigned from: -32,768 to 32, 768
\par \hich\af4\dbch\af31505\loch\f4 OR\tab \tab - 0 to 65,535
\par \hich\af4\dbch\af31505\loch\f4 i.e.
\par \tab \hich\af4\dbch\af31505\loch\f4 - add}{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 i}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  r1, r2, 4
\par \hich\af4\dbch\af31505\loch\f4 - Difference between # and i usage between MIPS and RISC is just grammatical; not ISA 
\par \hich\af4\dbch\af31505\loch\f4 - Since MIPS us\hich\af4\dbch\af31505\loch\f4 es 16 bit literals, we can save a 32 bit word into a register by loading 2 consecutive literals
\par \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Load Upper Immediate}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 stores 16 bit literal into upper 16 bits of a register, and clears the lower 16
\par \tab \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Logical OR}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 with 16 bit immediate can be used to access\hich\af4\dbch\af31505\loch\f4  lower 16 bits
\par \hich\af4\dbch\af31505\loch\f4 - MIPS is 32 bit oriented, so branch offset is shifted left twice
\par \tab \hich\af4\dbch\af31505\loch\f4 - This provides a 28 bit byte range of 256}{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 M}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4 bytes
\par 
\par \hich\af4\dbch\af31505\loch\f4 - MIPS register set is conventional
\par \tab \hich\af4\dbch\af31505\loch\f4 - Apart from the fact that r0 is fixed at 0, it has no special function registers
\par \hich\af4\dbch\af31505\loch\f4 - Registers are named using }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 $}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 0, }{
\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 $1}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  other than r0, r1
\par 
\par \hich\af4\dbch\af31505\loch\f4 - Load and Store are implemented as }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 LW}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  and }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 SW}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  in MIPS
\par \hich\af4\dbch\af31505\loch\f4 - MIPS provides }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 ONLY}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 a register-indirect with offset like
\par \hich\af4\dbch\af31505\loch\f4 - lw $1, 16 ($2) 
\par \tab \hich\af4\dbch\af31505\loch\f4 - i.e. r1 holds [16 + r2]
\par 
\par \hich\af4\dbch\af31505\loch\f4 - MIPS doesn\hich\f4 \rquote \hich\af4\dbch\af31505\loch\f4 t have complex addressing modes like CISC or ARM\hich\f4 \rquote \loch\f4 s block move and store
\par \tab \hich\af4\dbch\af31505\loch\f4 - Direct memory addressing is possible though, because if you use 
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - r0 (16 bit absolute address) and }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 pc}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  relative addressing is supported
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Conditional Branches}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - MIPS handles condi\hich\af4\dbch\af31505\loch\f4 tional branches differently from ARM
\par \hich\af4\dbch\af31505\loch\f4 - ARM processor branch depends on state of processor condition code
\par \hich\af4\dbch\af31505\loch\f4 - MIPS provides explicit compare and branch instructions
\par \hich\af4\dbch\af31505\loch\f4 - Only implements 4 conditions for a branch:
\par \tab \hich\af4\dbch\af31505\loch\f4 - beq\tab ; branch equal
\par \tab \hich\af4\dbch\af31505\loch\f4 - bne\tab ; branch not equal
\par \tab \hich\af4\dbch\af31505\loch\f4 - blez\tab ; branch less equal to zero
\par \tab \hich\af4\dbch\af31505\loch\f4 - bgtz\tab ; branch greater than zero
\par 
\par \hich\af4\dbch\af31505\loch\f4 - MIPS has a }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 set on condition}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
, where
\par \tab \hich\af4\dbch\af31505\loch\f4 alt $1, $2, $3 checks if 2 < 1 and sets $1 to 1 if test is true, or 0 if false
\par \tab \hich\af4\dbch\af31505\loch\f4 - This is useful for turning a boolean condition into a register th\hich\af4\dbch\af31505\loch\f4 at can be used b a conditional branch or data value
\par \hich\af4\dbch\af31505\loch\f4 - stlu, and stli and stlui operations perform it on unsigned, and immediate operands
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 MIPS Data Processing Instructions}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Very similar to ARM\hich\f4 \rquote \loch\f4 s data processing instructions
\par \hich\af4\dbch\af31505\loch\f4 - MIPS provides explicit shift operations
\par \tab \hich\af4\dbch\af31505\loch\f4 - 1 fixed length shift with a literal shift field
\par \tab \hich\af4\dbch\af31505\loch\f4 - 1 dynamic length shift with a register shift field;
\par \hich\af4\dbch\af31505\loch\f4 - This is again, an assembler feature and not ISA feature
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Data Processing and Data Movement}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - How do we mo\hich\af4\dbch\af31505\loch\f4 ve data? packing/shifting data elements? Processing groups of bits? Checking the bounds of data elements?
\par \hich\af4\dbch\af31505\loch\f4 - There is much variety in approach to computer ISA design
\par 
\par \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 data movement}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 is the most frequent computer operation
\par \hich\af4\dbch\af31505\loch\f4 - Computers must have load/store i\hich\af4\dbch\af31505\loch\f4 nstructions and }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 register-register}{\rtlch\fcs1 \af4\afs36 
\ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  data transfers
\par 
\par \hich\af4\dbch\af31505\loch\f4 - But what if you need to modify the order of the bytes in a 32 bit word, or
\par \tab \hich\af4\dbch\af31505\loch\f4 - Move data from consecutive memory location to consecutive odd/even locations
\par \hich\af4\dbch\af31505\loch\f4 - Few microprocessors permed direct memory-memory\hich\af4\dbch\af31505\loch\f4  operations
\par 
\par \hich\af4\dbch\af31505\loch\f4 - EXG X,S\tab ; Swaps the contents of X and S registers
\par \hich\af4\dbch\af31505\loch\f4 - SWAP X\tab ; Swaps the two halves of a register
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Special Data Movement Operation Example}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 IA32 }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 xlat}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 (translation) with no parameters
\par \hich\af4\dbch\af31505\loch\f4 - Uses 8 bit }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 al}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 register and 16 bit base register }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 bx}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - BX p\hich\af4\dbch\af31505\loch\f4 oints to memory, AL has an 8 bit offset
\par 
\par \hich\af4\dbch\af31505\loch\f4 - During execution of }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 xlat}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
, contents of AL are added to BX to give an effective address
\par \hich\af4\dbch\af31505\loch\f4 - 8 Bit operand at this address is loaded onto AL
\par \hich\af4\dbch\af31505\loch\f4 - Offset is use\hich\af4\dbch\af31505\loch\f4 d to look up data element in table and then data located at the element replaces offset 
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 XLAT}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Shows that 1 instruction can add index to base register, and perform register indirect move
\par \hich\af4\dbch\af31505\loch\f4 - XLAT is an instruction because it doesn\hich\f4 \rquote \loch\f4 t need operands (using 2\hich\af4\dbch\af31505\loch\f4  registers is implicit)
\par 
\par \hich\af4\dbch\af31505\loch\f4 - XLAt however has only 1 specific application
\par \hich\af4\dbch\af31505\loch\f4 - It is inflexible as the operand size is fixed, and it only is usable with register }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 AL}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  and }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 BX}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  

\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Indivisible Exchange Instructions}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 \hich\f4 - Some data move instructions are strange\'85.
\par \tab \hich\af4\dbch\af31505\loch\f4 - IA32 \hich\af4\dbch\af31505\loch\f4 provide a }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 compare/exchange}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  instruction that uses 3 operands (1 implicit, 2 explicit)
\par \hich\af4\dbch\af31505\loch\f4 i.e. }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 cmpxchg}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 (reg, reg) or (mem, reg)
\par \hich\af4\dbch\af31505\loch\f4 - Setz zero flag if equal, and copies 2nd operand into first
\par \hich\af4\dbch\af31505\loch\f4 - If accumulator and first operand are not equal, cmpxchg copies first o\hich\af4\dbch\af31505\loch\f4 perand into accumulator
\par \hich\af4\dbch\af31505\loch\f4 i.e.
\par \hich\af4\dbch\af31505\loch\f4 cmpxchg\tab bx,cx
\par 
\par \hich\af4\dbch\af31505\loch\f4 If [ax] = [bx]\tab THEN\tab [z] <- 1\tab \tab [bx] = [cx]
\par \tab \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 ELSE\tab [z]\tab <- 0\tab [ax] = [bx]
\par 
\par \hich\af4\dbch\af31505\loch\f4 If accumulator (ax) is already equal to (bx), do not set z
\par \hich\af4\dbch\af31505\loch\f4 If accumulator (ax) does not equal (bx), set z, and then copy 2nd into first
\par 
\par \hich\af4\dbch\af31505\loch\f4 - Defined as }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 indivisible}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 because it \tab has 2 operations; a test, an and then 1 of 2 possible actions
\par \hich\af4\dbch\af31505\loch\f4 - instruction also cannot be interrupted 
\par 
\par \hich\af4\dbch\af31505\loch\f4 - These are needed because when you\hich\f4 \rquote \loch\f4 re executing one request, you cannot allow another request to override the cur\hich\af4\dbch\af31505\loch\f4 rent one
\par \hich\af4\dbch\af31505\loch\f4 - Instruction Sets include synchronizing operations and data processing operations 
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Double Precision Shifting}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Shifting is just moving all the bits of a register left or right 
\par \hich\af4\dbch\af31505\loch\f4 - The max # of bits you can perform is equal to the register length/\hich\af4\dbch\af31505\loch\f4 size
\par 
\par \hich\af4\dbch\af31505\loch\f4 - If you\hich\f4 \rquote \loch\f4 re doing }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 extended precision arithmetic}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 , you need to shift over 2 registers
\par \hich\af4\dbch\af31505\loch\f4 \hich\f4 - Some processors copy the \'93\loch\f4 \hich\f4 carry\'94\loch\f4  bit into the 2nd register
\par 
\par \hich\af4\dbch\af31505\loch\f4 - IA32 allows for two double precision shifting:
\par \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 shld}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  and }{\rtlch\fcs1 
\ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 shrd}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 shod}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  \tab operand1, operand 2, immediate\tab 
\hich\af4\dbch\af31505\loch\f4 ; Immediate defines num of shifts
\par \hich\af4\dbch\af31505\loch\f4 shrd\tab operand1, operand 2, cl\tab \tab \tab \tab ; CL allows dynamic shifts (where CL is a register)
\par 
\par \hich\af4\dbch\af31505\loch\f4 - Double length shifting lets us pack data from several registers into a single register
\par \hich\af4\dbch\af31505\loch\f4 - Say we wanna store register BX with data from \hich\af4\dbch\af31505\loch\f4 3 sources:
\par \tab \hich\af4\dbch\af31505\loch\f4 a) P
\par \tab \hich\af4\dbch\af31505\loch\f4 b) Q
\par \tab \hich\af4\dbch\af31505\loch\f4 c) R
\par \hich\af4\dbch\af31505\loch\f4 i.e.
\par 
\par \hich\af4\dbch\af31505\loch\f4 MOV\tab ax, P\tab \tab \hich\f4 ; Stores \'93\loch\f4 \hich\f4 P\'94\rquote \loch\f4 s contents into accumulator
\par \hich\af4\dbch\af31505\loch\f4 shld\tab bx, ax, 5\tab ; Copy 5 high order bits from P to bx 
\par \hich\af4\dbch\af31505\loch\f4 mov\tab ax, Q\tab \tab ; Reads Q from accumulator
\par \hich\af4\dbch\af31505\loch\f4 shld\tab bx, ax, 7\tab ; Copies middle 7 bits
\par \hich\af4\dbch\af31505\loch\f4 mov\tab ax, R\tab \tab ; Copies R into accumulator
\par \hich\af4\dbch\af31505\loch\f4 shld\tab bx, ax\tab 4\tab ; Copies low order bits R
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Pack and Unpack Instructions}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - loading multiple data elements into a single register or memory location (packing)
\par \hich\af4\dbch\af31505\loch\f4 - OR
\par \hich\af4\dbch\af31505\loch\f4 - Moving 1 data element into multiple registers/memory locations
\par 
\par \hich\af4\dbch\af31505\loch\f4 i.e.
\par \hich\af4\dbch\af31505\loch\f4 68K ISA implements }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 PACK\tab \hich\af4\dbch\af31505\loch\f4 & UNPK}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - both act upon the lower order 16 bits of a 32 bit register
\par \hich\af4\dbch\af31505\loch\f4 i.e.
\par \hich\af4\dbch\af31505\loch\f4 PACK\tab D0, D1, #Literal \tab ; D0 is source, and packs it by the Literal for storage in D1
\par 
\par \hich\af4\dbch\af31505\loch\f4 - Helps to convert between unpacked ASCII and packed BCD data
\par \hich\af4\dbch\af31505\loch\f4 i.e.
\par \hich\af4\dbch\af31505\loch\f4 2 ASCII characters are conver\hich\af4\dbch\af31505\loch\f4 ted into packed BCD 
\par \hich\af4\dbch\af31505\loch\f4 - This allows for the storage of a 4 bit literal to be added to each of the source 4-bit words
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 UNPK}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Takes 2 hexadecimal nibble (4 bits each)
\par \hich\af4\dbch\af31505\loch\f4 - Converts it into 2, 8 bit values 
\par \hich\af4\dbch\af31505\loch\f4 - It does this by moving the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 nibbles}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  into consecutive bytes and then adding a constant to the results
\par 
\par \hich\af4\dbch\af31505\loch\f4 - Recall, if converting from BCD to Ascii, use #3030 because BCD is converted to ASCII by adding 30(base16)
\par 
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Bounds Testing}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - How do you know if a data element you\hich\f4 \rquote \loch\f4 re accessing falls with\hich\af4\dbch\af31505\loch\f4 in an array?
\par \hich\af4\dbch\af31505\loch\f4 - Array access errors are thrown if the index/location of an item is incorrectly computed at runtime
\par \hich\af4\dbch\af31505\loch\f4 - Problem arises if value of array is computed wrong, and the data to be accessed is outside the range of the array
\par \hich\af4\dbch\af31505\loch\f4 - Some high level language\hich\af4\dbch\af31505\loch\f4 s have tests to see if you\hich\f4 \rquote \loch\f4 re accessing items actually in the array
\par \hich\af4\dbch\af31505\loch\f4 - 68020 has a }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 bounds testing}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 operation CHK2 that determines if an array subscript is within the correct range or not
\par }{\rtlch\fcs1 \af4\afs34 \ltrch\fcs0 \f4\fs34\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 - If it is out of the range, an exception is thrown 
\par 
\par \hich\af4\dbch\af31505\loch\f4 To implement }{\rtlch\fcs1 \ab\af4\afs34 \ltrch\fcs0 \b\f4\fs34\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 boun\hich\af4\dbch\af31505\loch\f4 ds testing}{\rtlch\fcs1 \af4\afs34 \ltrch\fcs0 \f4\fs34\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4 : 
\par \hich\af4\dbch\af31505\loch\f4 - 2 Tests, 2 Conditional Branches
\par 
\par \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 LEA\tab Array, A0\tab \tab ; A0 contains base address of array
\par \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 ADDA\tab D0, A0\tab \tab \tab ; Element in D0 is added to base and A0 now points to element
\par }{\rtlch\fcs1 \ab\af4\afs34 \ltrch\fcs0 \b\f4\fs34\insrsid1067391 \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 CHK2}{\rtlch\fcs1 \af4\afs34 \ltrch\fcs0 \f4\fs34\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 .L Bounds, A0\tab ; Check bounds of pointer A0

\par \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 MOVE\tab (A0), D1\tab \tab ; Reads\hich\af4\dbch\af31505\loch\f4  the element
\par 
\par \hich\af4\dbch\af31505\loch\f4 Bounds \tab DC.L\tab Lower\tab \tab \tab ; Store lower bound
\par \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 DC.L\tab Upper\tab \tab \tab ; Store upper bound
\par 
\par \hich\af4\dbch\af31505\loch\f4 Compares A0 value with lower bound, and then [A0] Bounds + 4 }{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - If A0 is within range, nothing will happen
\par \hich\af4\dbch\af31505\loch\f4 - If outside of range, exception is generated 
\par \tab \hich\af4\dbch\af31505\loch\f4 - CMP2 has the same format as the CHK2, but carry flag signals an out-of-range error 
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Bit Field Data}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - bit field of a data structure is an arbitrary string of bits of any length 
\par \hich\af4\dbch\af31505\loch\f4 - Bit fields can be used to represent info that doesn\hich\f4 \rquote \loch\f4 t fit into 8, 16, or\hich\af4\dbch\af31505\loch\f4  32 bit packages like chars, ints and floats
\par \hich\af4\dbch\af31505\loch\f4 i.e. 19 bit field can be used to describe 3 fields of 3 bits, 7 bits, and 9 bits 
\par \hich\af4\dbch\af31505\loch\f4 - It might also represent a line of pixels in data 
\par 
\par \hich\af4\dbch\af31505\loch\f4 - Why don\hich\f4 \rquote \loch\f4 t we consider memory as a long string of bits?
\par \hich\af4\dbch\af31505\loch\f4 - It\hich\f4 \rquote \loch\f4 s difficult to\hich\af4\dbch\af31505\loch\f4  implement because of hardware restrictions 
\par \tab \hich\af4\dbch\af31505\loch\f4 - Memory is physically byte oriented with certains bus widths; if a word is long, it might require multiple consecutive memory accesses
\par \hich\af4\dbch\af31505\loch\f4 - A bit field is not more than a consecutive bits, it can be defined with }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 2 parameters}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \tab \hich\af4\dbch\af31505\loch\f4 a) }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 width}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  (w)/ }{\rtlch\fcs1 
\ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 length}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  (l)
\par \tab \hich\af4\dbch\af31505\loch\f4 b) }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 location}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  in memory (q)

\par \hich\af4\dbch\af31505\loch\f4 - q is expressed in }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 bits}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Specifying bit fields is a compromise between bits & bytes; It has a byte address to specify a point in memory, and then a bit offset to specify the bit field\hich\f4 \rquote \hich\af4\dbch\af31505\loch\f4 
s portion with respect to the certain byte
\par 
\par \hich\af4\dbch\af31505\loch\f4 i.e.
\par \hich\af4\dbch\af31505\loch\f4 Lets say we have a bit field specified with a }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 byte address}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 Fig 4.18 }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 The Bit Field}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par 
\par \hich\af4\dbch\af31505\loch\f4 (Byte i+2) (Byte i+1) (Byte i) (Byte i-1) - Byte address in memory
\par 
\par \hich\af4\dbch\af31505\loch\f4 (Byte i+2) (Byte i+1) : Contain the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 bit field}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 (Byte i+1)(Byte i) : Contain the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 base address}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 (Byte i-1) : Contains the byte address in memory
\par 
\par \hich\af4\dbch\af31505\loch\f4 - This format is in little endian, because the most significant bytes are on the lowest byte
\par 
\par \tab \hich\af4\dbch\af31505\loch\f4 - The bit field location is defined with resect to most signific\hich\af4\dbch\af31505\loch\f4 ant bit of a byte }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 i}{
\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 byte i}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  is called the }{
\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 base byte}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - It is the effective address of the bit field
\par \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 NOTE THAT:}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 Bit field itself follows the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 big endian}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  numbering convention

\par 
\par \hich\af4\dbch\af31505\loch\f4 76543210\hich\f4 \emdash \emdash \emdash \emdash \emdash \emdash \emdash \loch\f4 > Little Endian }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Bits of a Byte Orientation}{
\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 012345678\hich\f4 \emdash \emdash \emdash \emdash \emdash \emdash \emdash \loch\f4 > Big\hich\af4\dbch\af31505\loch\f4  Endian }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
Bits of a Bit Field}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Orientation}{\rtlch\fcs1 \af4\afs36 
\ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par 
\par \hich\af4\dbch\af31505\loch\f4 - The }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 bits of a bit field}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 are numbered in }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 REVERSE ORDER}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 , with respect to the }{\rtlch\fcs1 
\ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 bits of a byte}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - 68020 lets you specify bit widths dynamically by using data register; you can write  BFINS D0, 1234\{D3:D4\}
\par 
\par \hich\af4\dbch\af31505\loch\f4 If we consi\hich\af4\dbch\af31505\loch\f4 der a 68020 instruction, }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 bit field insert operation}{\rtlch\fcs1 \af4\afs36 
\ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 BFINS DN, <ea> \{offset:width\}
\par \tab \hich\af4\dbch\af31505\loch\f4 - This copies DN register into mem
\par \hich\af4\dbch\af31505\loch\f4 BFINS D0, 1234\{11:10\}\tab ; \{Offset, Width\}
\par \tab \hich\af4\dbch\af31505\loch\f4 - Least significant 10 bits in register D0 are copied into main store, starting at 11 (Byte }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 i}{\rtlch\fcs1 \af4\afs36 
\ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 , 7-\hich\af4\dbch\af31505\loch\f4 >0)
\par \tab \hich\af4\dbch\af31505\loch\f4 - This is the offset
\par \tab 
\par \hich\af4\dbch\af31505\loch\f4 - If we pack a 5 bit data element }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 X}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 into a 16 bit word
\par \hich\af4\dbch\af31505\loch\f4 - If we wanna extract this bit field without bit field specific operations:
\par \tab \hich\af4\dbch\af31505\loch\f4 - Load into Register
\par \tab \hich\af4\dbch\af31505\loch\f4 - Shift data Right to put in LSB bit position
\par \tab \hich\af4\dbch\af31505\loch\f4 - Clear remaining bits to zero
\par 
\par \hich\af4\dbch\af31505\loch\f4 MOV\tab PQRS, D0
\par \hich\af4\dbch\af31505\loch\f4 LSR\tab #6,\tab \tab D0
\par \hich\af4\dbch\af31505\loch\f4 AND\tab #%0000000000011111, D0
\par 
\par \hich\af4\dbch\af31505\loch\f4 however, 
\par \hich\af4\dbch\af31505\loch\f4 68020 }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 bit field extract}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 instruction:
\par \hich\af4\dbch\af31505\loch\f4 BFEXTU\tab PQRS\{5:5\}, D0\tab 
\par \tab \hich\af4\dbch\af31505\loch\f4 - This gets the packed data
\par 
\par \hich\af4\dbch\af31505\loch\f4 Bit field offset is 5 because position of bit field is measured from MS\hich\af4\dbch\af31505\loch\f4 B of base byte
\par \hich\af4\dbch\af31505\loch\f4 - 1st bit of bit field is bit x4, this is 5 bits from the LSB of the word
\par 
\par \hich\af4\dbch\af31505\loch\f4 - Bit field ops let you:
\par \tab \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 read}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  bit field from memory

\par \tab \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 write}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  bit field to memory

\par \tab \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 clear/set/toggle}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 the bits of a bit field
\par \tab \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 test}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  a bit field
\par 
\par \hich\af4\dbch\af31505\loch\f4 Fig 4.22 is a BFFO with a 21 bit bit field beginning in byte 1001
\par \hich\af4\dbch\af31505\loch\f4 - We wanna find the position of the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 first bit that is 1}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  within this bit field
\par \hich\af4\dbch\af31505\loch\f4 - BFFFO $1000\{10:21\}\tab \tab ; Remember, it\hich\f4 \rquote \loch\f4 s (Offset, Length/Width)
\par \hich\af4\dbch\af31505\loch\f4 - It determines the location of first 1, and loads\hich\af4\dbch\af31505\loch\f4  25 into D1
\par \tab \hich\af4\dbch\af31505\loch\f4 - Loads 25 because location of 1st }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 1}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  in field, plus offset 10
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Loop Counter}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Special Instruction from 68K
\par \hich\af4\dbch\af31505\loch\f4 - It has a }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 DBRA}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 : Decrement and Branch 
\par \hich\af4\dbch\af31505\loch\f4 - It lets you specify 1 of 8 loop counters
\par \hich\af4\dbch\af31505\loch\f4 - 1 of 2 exit points
\par \hich\af4\dbch\af31505\loch\f4 - Loop can be terminated when lo\hich\af4\dbch\af31505\loch\f4 op count has been exhausted, or if a certain condition is detected
\par 
\par \hich\af4\dbch\af31505\loch\f4 - Instruction terminates loop on }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 -1}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
, not 0 for }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 DBRA}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par 
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 MOV\tab #10, D0
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 CLR\tab D1
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 LEA\tab Table, A0
\par \hich\af4\dbch\af31505\loch\f4 Next\tab ADD\tab (A0)+,D1
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 DBCS\tab D0, Next
\par 
\par \hich\af4\dbch\af31505\loch\f4 - DBCS reduces the loop body from 4 instructions to just 2
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Memory Indirect Accessing}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - MIA lets you implement complex data structures
\par \hich\af4\dbch\af31505\loch\f4 - Register indirect addressing uses a pointer to access required operand
\par \hich\af4\dbch\af31505\loch\f4 - In MIA, register provides a pointer to a }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 pointer in memory}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 

\par \hich\af4\dbch\af31505\loch\f4 - Operand is accessed by reading the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 2nd}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  pointer, and accessing data at address given by }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 2nd}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  pointer
\par \hich\af4\dbch\af31505\loch\f4 - 4 Mem/Register accesses are required: 
\par \tab \hich\af4\dbch\af31505\loch\f4 i) Read instruction
\par \tab \hich\af4\dbch\af31505\loch\f4 ii) Read register containing pointer to men
\par \tab \hich\af4\dbch\af31505\loch\f4 iii) Read memory containing pointer to operand
\par \tab \hich\af4\dbch\af31505\loch\f4 iv) Access operand
\par 
\par \hich\af4\dbch\af31505\loch\f4 i.e. Say we have a \hich\af4\dbch\af31505\loch\f4 pointer register with a 32 bit value 1234 (base16)
\par \hich\af4\dbch\af31505\loch\f4 The contents of the target address are 122488(base16)
\par \hich\af4\dbch\af31505\loch\f4 These are used as a 2nd pointer to access actual operand
\par \hich\af4\dbch\af31505\loch\f4 - Initial register is R1, destination register is R2; and instruction is a move:
\par \hich\af4\dbch\af31505\loch\f4 RTL Notation
\par \hich\af4\dbch\af31505\loch\f4 [R2] <- [[R1]]
\par 
\par \hich\af4\dbch\af31505\loch\f4 Pointer (00001234) -> Memory (00122488) -> Memory (ABCD) -> Store in Destination Register
\par 
\par \hich\af4\dbch\af31505\loch\f4 Say we have a }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 DATA STRUCTURE}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  

\par \hich\af4\dbch\af31505\loch\f4 - Contains consecutive 16 byte values
\par \hich\af4\dbch\af31505\loch\f4 - Pointer register has 1234(base16), and this is the 1st item in the structure
\par \hich\af4\dbch\af31505\loch\f4 - \hich\af4\dbch\af31505\loch\f4 To get to item 2, we can simply add 16 to value in pointer register
\par \hich\af4\dbch\af31505\loch\f4 - Processors use a register-indirect with offset mode to add a constant to a pointer
\par \tab \hich\af4\dbch\af31505\loch\f4 - IN ARM: \tab \tab LDR\tab r1, [r0, #16]\tab 
\par \tab \hich\af4\dbch\af31505\loch\f4 - IN 68K:\tab \tab MOV (16, A0), D1
\par 
\par \hich\af4\dbch\af31505\loch\f4 - But what if the data structure doesn\hich\f4 \rquote \hich\af4\dbch\af31505\loch\f4 t have consistent sized items?
\par \hich\af4\dbch\af31505\loch\f4 - What if some items are larger than the next?
\par \hich\af4\dbch\af31505\loch\f4 - We can do }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 memory indirect accessing}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4 , where the ORIGINAL pointer register, points to a stack of memory pointers
\par \tab \hich\af4\dbch\af31505\loch\f4 - These memory pointers then point to the actual information, an\hich\af4\dbch\af31505\loch\f4 d this info can be different sizes
\par \tab \hich\af4\dbch\af31505\loch\f4 - We can simply traverse the data items by incrementing by}{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  4}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  because the base pointer steps through a table of pointers
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 The SWITCH construct}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - A switch lets you invoke 1 of }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 n}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 functions depending on a value of a variabl\hich\af4\dbch\af31505\loch\f4 e
\par \hich\af4\dbch\af31505\loch\f4 \hich\f4 - If you were building a CPU simulator\'85
\par \hich\af4\dbch\af31505\loch\f4 - You\hich\f4 \rquote \loch\f4 d want an interpreter that has this:
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Switch (operation)}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \{
\par \tab \hich\af4\dbch\af31505\loch\f4 case LOAD:
\par \tab \hich\af4\dbch\af31505\loch\f4 case STORE:
\par \tab \hich\af4\dbch\af31505\loch\f4 case ADD:
\par \tab \hich\af4\dbch\af31505\loch\f4 case BEQ:\tab 
\par \}
\par 
\par \hich\af4\dbch\af31505\loch\f4 Fig 4.28 shows a data structure that you could use for this construct where a memory table holds p\hich\af4\dbch\af31505\loch\f4 ointers to the functions
\par \hich\af4\dbch\af31505\loch\f4 - Required function is executed by putting the required pointer in the PC
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Switch Construct using CISC (68K)}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Use memory indirect addressing to call required subroutine with:
\par \hich\af4\dbch\af31505\loch\f4 JSR ([A0, D0*4)]\tab ; Calls subroutine specified by D0 (Table base is in A0)
\par \hich\af4\dbch\af31505\loch\f4 - Using memory indirect addressing, we can implement a SWITCH construct
\par 
\par \hich\af4\dbch\af31505\loch\f4 That\hich\f4 \rquote \loch\f4 s because, we use a }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 pointer}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4 , with an }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 offset}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
, and then this selects another }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 pointer}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 (which stores the command) and then executes the command and returns
\par \hich\af4\dbch\af31505\loch\f4 - This is where dynamic offsets become useful*
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Difference between Pre & Post indexed memory addressing}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Index register can be added to pointer table (pre-indexing) 
\par \hich\af4\dbch\af31505\loch\f4 - Index register c\hich\af4\dbch\af31505\loch\f4 an also be added to the destination table (}{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 post indexing}{\rtlch\fcs1 
\af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 ) 
\par \hich\af4\dbch\af31505\loch\f4 - This is due to 68K\hich\f4 \rquote \loch\f4 s Instruction Format, it can only specify 5 parameters in a Memory Indirect Address
\par 
\par \hich\af4\dbch\af31505\loch\f4 Fig 4.30: Preindexed Memory Indirect Addressing 
\par \hich\af4\dbch\af31505\loch\f4 Memory indirect with Preindexing is: when \hich\af4\dbch\af31505\loch\f4 the Address is combined with the offset and this affects the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4 1st pointer}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Postindexed Memory Indirect Addressing
\par \hich\af4\dbch\af31505\loch\f4 - When the address of the 1st pointer is combined with offset
\par \hich\af4\dbch\af31505\loch\f4 - This affects the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 2nd pointer}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  

\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Using MIA to access Records}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 If you have a set of\hich\af4\dbch\af31505\loch\f4  records indexed by day, and each record contains 6 x 32 bit items
\par \hich\af4\dbch\af31505\loch\f4 - We can construct a region of memory with 64 bytes of data used by a table of pointers followed by pointers
\par \hich\af4\dbch\af31505\loch\f4 - Every pointer points to appropriate day\hich\f4 \rquote \loch\f4 s six results
\par \hich\af4\dbch\af31505\loch\f4 - A0 points to the base \hich\af4\dbch\af31505\loch\f4 of data structure; this includes other items along with the pointers
\par \hich\af4\dbch\af31505\loch\f4 - BD refers to }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 base displacement}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
, and is where the list of days starts, with respect to the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 start}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 of the region of data* 
\par 
\par \hich\af4\dbch\af31505\loch\f4 - Start of day to be slected is in D0
\par \hich\af4\dbch\af31505\loch\f4 - Each entry is a 4 byte value, so D0 is scaled by 4
\par \hich\af4\dbch\af31505\loch\f4 - So effect I\hich\f4 \rquote \loch\f4 ve address of pointer is
\par \hich\af4\dbch\af31505\loch\f4 [A0] + bd + 4*[D0]
\par \hich\af4\dbch\af31505\loch\f4 - The processor reads this pointer
\par 
\par \hich\af4\dbch\af31505\loch\f4 - What if we wanna know item 5\hich\f4 \rquote \loch\f4 s value?
\par \hich\af4\dbch\af31505\loch\f4 - During execution, when the processor reads a pointer from memory, i\hich\af4\dbch\af31505\loch\f4 t adds outer displacement to it, and this calculates the effective address of the desired operand
\par \hich\af4\dbch\af31505\loch\f4 - Outer Displacement refers to the displacement added to the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 1st pointer}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 
\par 
\par \hich\af4\dbch\af31505\loch\f4 MIA Accessing Records w/o MIA
\par 
\par \hich\af4\dbch\af31505\loch\f4 LSL.L\tab \tab #2, D0
\par \hich\af4\dbch\af31505\loch\f4 LEA\tab \tab (64, A0, D0.L),A1
\par \hich\af4\dbch\af31505\loch\f4 MOVEA.L\tab (A1),A1
\par \hich\af4\dbch\af31505\loch\f4 ADDA.L\tab #4,A1
\par \hich\af4\dbch\af31505\loch\f4 MOVE.B\tab (A1),D1
\par 
\par \hich\af4\dbch\af31505\loch\f4 But if it\hich\f4 \rquote \loch\f4 s }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 memory indirect addressing}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  with }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 pre-indexing}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 : 
\par \hich\af4\dbch\af31505\loch\f4 MOVE.B\tab ([64,A0,D0.L*4],4), D1
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Compressed Code}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Introduction of compressed RISC:
\par \hich\af4\dbch\af31505\loch\f4 - An 8 bit processor uses lower cost 8 bit memory, peripherals and buses in order to \hich\af4\dbch\af31505\loch\f4 be cost effective
\par \hich\af4\dbch\af31505\loch\f4 - RISC attempted to enter the embedded processor market, but their 32 bit machines aren\hich\f4 \rquote \loch\f4 t cost effective
\par \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ai\af4\afs36 \ltrch\fcs0 \i\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 compressed RISC}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 is a compromise, has the RISC architecture but a shorter word length
\par \hich\af4\dbch\af31505\loch\f4 - The first machine was }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 the Thumb}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 (An ARM derivative)
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Thumb ISA}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - ISA is WHAT it does
\par \hich\af4\dbch\af31505\loch\f4 - Organization is HOW it does it
\par 
\par \hich\af4\dbch\af31505\loch\f4 - Thumb takes ARM\hich\f4 \rquote \loch\f4 s 32 bit Instruction Set, and puts it into a 16 bit mould
\par \hich\af4\dbch\af31505\loch\f4 - Thus, its processor can execute compressed 16 bit thumb code, and 32 bit code
\par \hich\af4\dbch\af31505\loch\f4 - This is d\hich\af4\dbch\af31505\loch\f4 one by putting the ARM processor code in small 32 bit wide memories, and then putting everything else in low cost 16 bit memories
\par 
\par \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Thumb}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 is 26% smaller than ARM if optimized for performance
\par \hich\af4\dbch\af31505\loch\f4 - It is 32% smaller if optimized for size
\par \hich\af4\dbch\af31505\loch\f4 - When optimized for p\hich\af4\dbch\af31505\loch\f4 erformance, Thumb can achieve 98% of the performance of ARM processor code
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Thumb\hich\f4 \rquote \loch\f4 s Register Set}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - r0-r7 are programmer-accessible 
\par \hich\af4\dbch\af31505\loch\f4 - r13 (SP), r14 (LR), r15 (PC) are all programmer accessible
\par \hich\af4\dbch\af31505\loch\f4 - r8-12 can only be accessed through special instructions
\par \hich\af4\dbch\af31505\loch\f4 - Th\hich\af4\dbch\af31505\loch\f4 umb state Instructions have a 2 address format similar to CISC ISA\hich\f4 \rquote \loch\f4 s 
\par \hich\af4\dbch\af31505\loch\f4 - Thumb instructions are all 16 bits wide
\par 
\par \hich\af4\dbch\af31505\loch\f4 - ARM processors that support Thumb, have an extra }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 T}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  bit in their CPSR
\par \hich\af4\dbch\af31505\loch\f4 - When }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 T}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 is set (1), processors interpret code as 16 bit Thumb instructi\hich\af4\dbch\af31505\loch\f4 ons
\par \hich\af4\dbch\af31505\loch\f4 - Afterwards, ARM enters its native state
\par 
\par \hich\af4\dbch\af31505\loch\f4 - Thumb state is entered in ARM by executing }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 BX}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  which sets the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 T}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 bit, and jumps to a specified location
\par \tab \hich\af4\dbch\af31505\loch\f4 - i.e. BX Rm, where }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Rm}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 (register) contains the address of thumb code to be executed
\par \hich\af4\dbch\af31505\loch\f4 - The LSB of }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Rm}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  is tested 
\par \tab \hich\af4\dbch\af31505\loch\f4 - If 1 is found, ARM treats the code as a half-word boundary, and the code is executed in }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Thumb}{\rtlch\fcs1 \af4\afs36 
\ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \tab \hich\af4\dbch\af31505\loch\f4 - If 0 is found, ARM jumps to }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Rm}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4 , and aligns it to a word (32 bits) and ARM executes it normally, without }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Thumb}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par 
\par \hich\af4\dbch\af31505\loch\f4 - The same instruction is used \hich\af4\dbch\af31505\loch\f4 to return to the native state
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Design Decisions}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Moving from a small to large is easy. 
\par \hich\af4\dbch\af31505\loch\f4 - Moving from large to small is hard, as you must throw some stuff out
\par \hich\af4\dbch\af31505\loch\f4 - ARM designers had an issue; what to throw away for the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Thumb}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  architecture?
\par \hich\af4\dbch\af31505\loch\f4 - You can\hich\f4 \rquote \loch\f4 t remove \hich\af4\dbch\af31505\loch\f4 registers, because that will change the architecture, and lead to incompatibility between Thumb and ARM
\par 
\par \hich\af4\dbch\af31505\loch\f4 - The compromise is to retain the original registers, and only redefine how they are accessed 
\par \hich\af4\dbch\af31505\loch\f4 - r0-r7 in ARM are mapped directly to registers }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 r0 - r7}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  \hich\af4\dbch\af31505\loch\f4 of Thumb State
\par \hich\af4\dbch\af31505\loch\f4 - r14, and r15 are the same, but they can\hich\f4 \rquote \loch\f4 t be explicitly accessed, and require special instructions
\par \hich\af4\dbch\af31505\loch\f4 - r14, can be used as a stack pointer in ARM, but is now a }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 hardware stack pointer}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 , and has auto-decrementing and incrementing modes
\par 
\par \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 r8-12}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  are different
\par \hich\af4\dbch\af31505\loch\f4 - They\hich\f4 \rquote \loch\f4 re usually only accessed by the most frequently used programs (- 1 bit we have to worry about)
\par \tab \hich\af4\dbch\af31505\loch\f4 - Recall, thumb is 16 bit instructions wide
\par \hich\af4\dbch\af31505\loch\f4 - Thumb has abandoned conditional execution
\par \hich\af4\dbch\af31505\loch\f4 - Thumb uses 2 address format, to eliminate the 3r\hich\af4\dbch\af31505\loch\f4 d operand
\par \hich\af4\dbch\af31505\loch\f4 - Thumb has abandoned 2nd operand shift, and included a new set of explicit shift instructions
\par \hich\af4\dbch\af31505\loch\f4 - Thumb has reduced the size of immediate operands (Reduced to 3 bit, 7 bit, and 8 bit values)
\par 
\par \hich\af4\dbch\af31505\loch\f4 - Thumb\hich\f4 \rquote \loch\f4 s state stack is }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Full Descending}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Thumb State Branch Instructions}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Conditional branches use an 8 bit offset
\par \hich\af4\dbch\af31505\loch\f4 - Unconditional branches have an 11 bit offset
\par \hich\af4\dbch\af31505\loch\f4 - Allows for short-range branching for conditionals within small loops, and }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 if-then-else}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  constructs
\par \tab \hich\af4\dbch\af31505\loch\f4 - The }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 H}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 bit allows for a high or \hich\af4\dbch\af31505\loch\f4 low offset to be selected
\par 
\par \hich\af4\dbch\af31505\loch\f4 But what about }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 BL?}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Since Thumb implements such a short literal set, it isn\hich\f4 \rquote \loch\f4 t compatible with giving the range of target addresses
\par 
\par \hich\af4\dbch\af31505\loch\f4 - Solution is to use a }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 BL}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 with 11 bit offset, and then repeat it to get a 2nd 11 bit offset;
\par \hich\af4\dbch\af31505\loch\f4 - T\hich\af4\dbch\af31505\loch\f4 hese two values are then added, and you get a 22 bit offset
\par 
\par \hich\af4\dbch\af31505\loch\f4 HOW does it do this?
\par 
\par \hich\af4\dbch\af31505\loch\f4 Method of Thumb State Branch with Link
\par \hich\af4\dbch\af31505\loch\f4 - When 1st instruction is executed, with no }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 H-bit}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  (0), 
\par \tab \hich\af4\dbch\af31505\loch\f4 a) LR is used as temp register to hold the partial branch target address the \hich\af4\dbch\af31505\loch\f4 PC gives SHIFTED 12 PLACES LEFT
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - 12 because all }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Thumb}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  IS
\hich\f4 \rquote \loch\f4 s are 16 bit aligned on a half word
\par 
\par \hich\af4\dbch\af31505\loch\f4 1. H = 0\tab lr = pc  + sign extended offset x 2^12
\par \hich\af4\dbch\af31505\loch\f4 2. H = 1\tab pc = lr + offset x 2^1; lr = pc+3
\par 
\par \hich\af4\dbch\af31505\loch\f4 - When the 2nd instruction is executed, the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 low order}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  part of the target is added to sum in link register
\par \tab \hich\af4\dbch\af31505\loch\f4 - This result is stored in the PC and the branch is executed
\par \hich\af4\dbch\af31505\loch\f4 - The return address is then loaded into the LR
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 State Switching}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - If using ARM/Thumb programs, the assembler must know what state you are i\hich\af4\dbch\af31505\loch\f4 n
\par \hich\af4\dbch\af31505\loch\f4 - The type of code is indicated with 
\par \tab \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 CODE32}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  (ARM Code)
\par \tab \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 CODE16}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  (Thumb Code)
\par \hich\af4\dbch\af31505\loch\f4 - The default is }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 CODE32}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  (ARM)

\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Thumb State Load and Store}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Thumb\hich\f4 \rquote \loch\f4 s Load and Store, follow a similar pattern to ARM processor instructions
\par \hich\af4\dbch\af31505\loch\f4 - BUT, their displacement specified by an immediate offset is small (from 5-8 bits)
\par \hich\af4\dbch\af31505\loch\f4 - Byte, half-word, and word transfers are supported
\par 
\par \hich\af4\dbch\af31505\loch\f4 - Offset is scaled to suit the size of the data transfer
\par \tab \hich\af4\dbch\af31505\loch\f4 - i.e. If 5 bit offset is 12, and effective address is [r0, #\hich\af4\dbch\af31505\loch\f4 12]
\par \tab \hich\af4\dbch\af31505\loch\f4 - And if r0 = 1000
\par \tab \hich\af4\dbch\af31505\loch\f4 - A byte is accessed at 1012
\par \tab \hich\af4\dbch\af31505\loch\f4 - A half-word is accessed at 1024
\par \tab \hich\af4\dbch\af31505\loch\f4 - A word is located at 1048
\par \hich\af4\dbch\af31505\loch\f4 - This shows that an offset is multiplied by the size of the operand
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 PC Relative Addressing}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Register Indirect addressing uses a register to provide an address of an operand
\par \hich\af4\dbch\af31505\loch\f4 - The contents of a register can be changed; thus the effective address becomes dynamic 
\par \hich\af4\dbch\af31505\loch\f4 - If the pointer register is }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 PC}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
, the target address is specified with respect to cur\hich\af4\dbch\af31505\loch\f4 rent instruction
\par \hich\af4\dbch\af31505\loch\f4 - This is used for }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 branching}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
, and allows relative branching (code can be relocated without recalculating target addresses)
\par \tab \hich\af4\dbch\af31505\loch\f4 - Using PC relative addressing lets code be }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 reload able}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  since location is specified with respect to current locatio\hich\af4\dbch\af31505\loch\f4 n
\par \tab \hich\af4\dbch\af31505\loch\f4 - This is read-only because you don\hich\f4 \rquote \loch\f4 t want to be changing the locations
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 ARM Thumb Relative Addressing}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - PC relative addressing is possible in }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Thumb}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  with an 8 bit signed offset
\par \tab \hich\af4\dbch\af31505\loch\f4 - Use LDR rd, [PC, #imm8]
\par \hich\af4\dbch\af31505\loch\f4 - This is required because Thumb can\hich\f4 \rquote \loch\f4 t directly \hich\af4\dbch\af31505\loch\f4 access PC in r15
\par \hich\af4\dbch\af31505\loch\f4 - It\hich\f4 \rquote \loch\f4 s used to load local constants, instead of store data
\par 
\par \hich\af4\dbch\af31505\loch\f4 - LDR\tab Rd, [SP, #imm8]
\par \hich\af4\dbch\af31505\loch\f4 - STR\tab Rd, [SP, #imm8]
\par \hich\af4\dbch\af31505\loch\f4 These permit data access with respect to SP
\par 
\par \hich\af4\dbch\af31505\loch\f4 - Thumb allows multiple memory move instructions, but range isn\hich\f4 \rquote \loch\f4 t as great as ARM\hich\f4 \rquote \loch\f4 s 
\par \hich\af4\dbch\af31505\loch\f4 - In \hich\af4\dbch\af31505\loch\f4 other words, STM and LDM in }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Thumb}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  are:
\par 
\par \hich\af4\dbch\af31505\loch\f4 LDMIA/STMIA\tab Rn!\tab \{regList\}
\par \hich\af4\dbch\af31505\loch\f4 POP/PUSH\tab \tab \{regList\{,R\}\}
\par 
\par \hich\af4\dbch\af31505\loch\f4 - Since Thumb is only 16 bit, you can only move registers r0-r7
\par \hich\af4\dbch\af31505\loch\f4 - None of the higher order registers may be moved
\par 
\par \hich\af4\dbch\af31505\loch\f4 - STMIA\tab Rn!, \{registerList\} 
\par \tab \hich\af4\dbch\af31505\loch\f4 - This allows you to copy a block of registers specified by the list, to the memory location pointed at by Rn
\par \hich\af4\dbch\af31505\loch\f4 - The only mode allowed for Thumb is Postindexing\tab  (probably to save space)
\par \hich\af4\dbch\af31505\loch\f4 - The lowest num register is stored first, at the lowest memory addre\hich\af4\dbch\af31505\loch\f4 ss
\par 
\par \hich\af4\dbch\af31505\loch\f4 Same goes for LDMIA\tab Rn!, \{registerList\}
\par \hich\af4\dbch\af31505\loch\f4 - Lowest num memory address is loaded first into lowest register
\par \hich\af4\dbch\af31505\loch\f4 - Pointer is THEN incremented by 4 (post indexed)
\par 
\par \hich\af4\dbch\af31505\loch\f4 - STMIA and LDMIA are inverse operations, using 1 after the other doesn\hich\f4 \rquote \loch\f4 t change the system stat\hich\af4\dbch\af31505\loch\f4 e
\par 
\par \hich\af4\dbch\af31505\loch\f4 The OTHER block move instructions in }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Thumb}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  are 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 PUSH and POP}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 -They don\hich\f4 \rquote \loch\f4 t need a register to be specified, and don\hich\f4 \rquote \loch\f4 t need the ! suffix, because
\par \tab \hich\af4\dbch\af31505\loch\f4 - They utilize the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 SP}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  (r13)

\par \tab \hich\af4\dbch\af31505\loch\f4 - The just access the stack pointer
\par 
\par \hich\af4\dbch\af31505\loch\f4 - The syntax is:
\par \tab \hich\af4\dbch\af31505\loch\f4 - registerList \{,R\} wher\hich\af4\dbch\af31505\loch\f4 e \{,R\} is optional
\par \tab \hich\af4\dbch\af31505\loch\f4 - R may be }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 sp}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 , or }{
\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 pc}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - This R field lets you add the PC or link register to a block of registers
\par \hich\af4\dbch\af31505\loch\f4 - This allows for efficient implementation of subroutines and recursion
\par 
\par \hich\af4\dbch\af31505\loch\f4 Why did we learn }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Thumb?}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Shows ISA design
\par \hich\af4\dbch\af31505\loch\f4 - Important for Embedded computing
\par \hich\af4\dbch\af31505\loch\f4 - Demonstrates tradeoff between code density and performance
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 MIPS 16}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - This is }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Thumb}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \loch\af4\dbch\af31505\hich\f4 \rquote \loch\f4 
s brother
\par \hich\af4\dbch\af31505\loch\f4 - Developed to provide a 16 bit processor while keeping compatibility  with MIPS-I and MIPS-III
\par 
\par \hich\af4\dbch\af31505\loch\f4 - MIPS16\hich\f4 \rquote \loch\f4 s secret is how it\loch\af4\dbch\af31505\hich\f4 \rquote \loch\f4 s mapped out onto the MIPS16 16-bit Instruction Set
\par \hich\af4\dbch\af31505\loch\f4 - We are only concerned with how a 32 bit ISA is mapped onto a 16 bit ISA
\par 
\par \hich\af4\dbch\af31505\loch\f4 - Compresssing MIPS code is done by slicing bits off of the MIPS code
\par \hich\af4\dbch\af31505\loch\f4 - MIPS is further reduced by dropping an op code bit
\par \hich\af4\dbch\af31505\loch\f4 - The\hich\af4\dbch\af31505\loch\f4  # of registers is reduced from 32 to 8, saving 2 register specific bits per register
\par \hich\af4\dbch\af31505\loch\f4 - Size of Immediate literal is reduced from 16 to 5
\par 
\par \hich\af4\dbch\af31505\loch\f4 - MIPS16 has 2 address mode instruction much like }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Thumb}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Source and destination registers are same; one of the 2 sou\hich\af4\dbch\af31505\loch\f4 rces is overwritten
\par \hich\af4\dbch\af31505\loch\f4 - Since 32 is being halved to stuff into a 16 bit word, new problems arise
\par \hich\af4\dbch\af31505\loch\f4 - As with Thumb, it\hich\f4 \rquote \loch\f4 s hard to do BL, because of the short immediate 
\par \hich\af4\dbch\af31505\loch\f4 - Thus, MIPS16 implements an extend instruction that doesn\hich\f4 \rquote \loch\f4 t execute anything, but gives you\hich\af4\dbch\af31505\loch\f4 
 a 11 bit literal that can be added with the 5 bit literal to create a 16 length word
\par \hich\af4\dbch\af31505\loch\f4 - This is more elegant than CISC\hich\f4 \rquote \loch\f4 s multiple length instruction
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 How is MIPS16 like Thumb?}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Has a hardware stack pointer
\par \hich\af4\dbch\af31505\loch\f4 - Allows load and store relative to the SP, which is more like CISC
\par \hich\af4\dbch\af31505\loch\f4 - when Load or Store is done, offset is 8 bits because the literal can be added on 
\par \hich\af4\dbch\af31505\loch\f4 - MIPS16 has only 8 visible registers; the other 24 can be accessed via special move instructions that c\hich\af4\dbch\af31505\loch\f4 opy data between }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4 MIPS core}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  and }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 MIPS16}{\rtlch\fcs1 
\af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  register sets
\par 
\par \hich\af4\dbch\af31505\loch\f4 - MIPS 16 supports branches on any register that is equal or not equal to zero with 
\par \tab \hich\af4\dbch\af31505\loch\f4 - BEQZ\tab rx, immediate
\par \tab \hich\af4\dbch\af31505\loch\f4 - BNEZ\tab rx, immediate
\par 
\par \hich\af4\dbch\af31505\loch\f4 - Branch instruction takes an 8 bit signed literal that forms part of the\hich\af4\dbch\af31505\loch\f4  instruction
\par \hich\af4\dbch\af31505\loch\f4 - It shifts it left 1 bit and adds it to PC to create a relative address
\par \tab \hich\af4\dbch\af31505\loch\f4 - RELATIVE ADDRESS generated by:
\par \tab \hich\af4\dbch\af31505\loch\f4 - 8 Bit literal x 2 + PC
\par \hich\af4\dbch\af31505\loch\f4 - If Register contents are zero or nonzero, a branch could occur
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 The T- Register}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - MIPS16 has a register call\hich\af4\dbch\af31505\loch\f4 ed the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 T-Register}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 
\par \tab \hich\af4\dbch\af31505\loch\f4 - This isn\hich\f4 \rquote \loch\f4 t part of the original MIPS
\par \hich\af4\dbch\af31505\loch\f4 - This is needed to support conditional execution
\par \tab \hich\af4\dbch\af31505\loch\f4 - Why?
\par \hich\af4\dbch\af31505\loch\f4 - You have commands such as BTEQZ, and BTNEZ
\par \hich\af4\dbch\af31505\loch\f4 - The register tested is the T register
\par 
\par \hich\af4\dbch\af31505\loch\f4 - The T register is set/cleared by MIPS16 set on less \hich\af4\dbch\af31505\loch\f4 than
\par \hich\af4\dbch\af31505\loch\f4 - So it\hich\f4 \rquote \loch\f4 s pretty much branch on less than
\par 
\par \hich\af4\dbch\af31505\loch\f4 - This is used to compare 2 registers with:
\par \hich\af4\dbch\af31505\loch\f4 - SLT R1, R2
\par 
\par }{\rtlch\fcs1 \ab\af4\afs56 \ltrch\fcs0 \b\f4\fs56\ul\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 CHAPTER 6}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  - Performance
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Performance}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - What is performance?
\par \hich\af4\dbch\af31505\loch\f4 - How is performance measured?
\par \hich\af4\dbch\af31505\loch\f4 - What affects performance?
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Moore\hich\f4 \rquote \loch\f4 s Law}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Moore\hich\f4 \rquote \hich\af4\dbch\af31505\loch\f4 s law suggests an exponential increase in max num of components on a chip with time
\par \hich\af4\dbch\af31505\loch\f4 - It\hich\f4 \rquote \loch\f4 s simply an observation, not an actual Law
\par \hich\af4\dbch\af31505\loch\f4 - Implies doubling of performance of digital systems every 18 months
\par 
\par \hich\af4\dbch\af31505\loch\f4 Examining Fig. 6.2
\par \hich\af4\dbch\af31505\loch\f4 - # of transistors per microprocess\hich\af4\dbch\af31505\loch\f4 or chip is graphed as a function of time 
\par \hich\af4\dbch\af31505\loch\f4 - In ~5 decades, the chip density has gone from 2000 -> 2 billion devices 
\par 
\par \hich\af4\dbch\af31505\loch\f4 (Arbitrary Graphs)
\par \hich\af4\dbch\af31505\loch\f4 Fig 6.2 -> Fig 6.8
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Performance and Design}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - PC performance is dependent on:
\par \tab \hich\af4\dbch\af31505\loch\f4 - Cache/Main memory
\par \tab \hich\af4\dbch\af31505\loch\f4 - Buses
\par \tab \hich\af4\dbch\af31505\loch\f4 - Secondary Storage
\par \hich\af4\dbch\af31505\loch\f4 - All of these contribute to overall performance of the computer; 
\par \tab \hich\af4\dbch\af31505\loch\f4 - The whole is greater than the sum of its parts
\par \tab \hich\af4\dbch\af31505\loch\f4 - Simply maximizing the stats of one part will not max the total potential of the PC
\par 
\par \hich\af4\dbch\af31505\loch\f4 - Desginers/Engineers must cons\hich\af4\dbch\af31505\loch\f4 ider:
\par \tab \hich\af4\dbch\af31505\loch\f4 - What parameters/specs must be refined to optimize certain applications?
\par \hich\af4\dbch\af31505\loch\f4 - Computer performance could be mathematically analyzed using its functions
\par \tab \hich\af4\dbch\af31505\loch\f4 - But this would take too much time as PC\hich\f4 \rquote \loch\f4 s are complex
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 David Lilja\hich\f4 \rquote \loch\f4 s Criteria of Comp Performanc\hich\af4\dbch\af31505\loch\f4 e}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 i) Linearity}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \tab \hich\af4\dbch\af31505\loch\f4 - A metric should be linear
\par \tab \hich\af4\dbch\af31505\loch\f4 - Increasing performance by }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 x}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 should be reflected by increasing }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 x}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  in the metric 
\par \tab \hich\af4\dbch\af31505\loch\f4 - If A has metric 200, and is 2x faster than B
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - Then B should have a metric of 100
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 ii) Reliability}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Performance metrics sho\hich\af4\dbch\af31505\loch\f4 uld be }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 reliable}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 
\par \tab \hich\af4\dbch\af31505\loch\f4 - They should be accurate in predicting if 1 PC is faster than another
\par \hich\af4\dbch\af31505\loch\f4 - Monotonicity: 
\par \tab \hich\af4\dbch\af31505\loch\f4 - Is that an increase in a metric should indicate an increase in the PC
\par \tab \hich\af4\dbch\af31505\loch\f4 - Never the other way around
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 iii) Repeatability}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - A good metric should be }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 repeatable}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  such that it yields consisted results in consistent conditions
\par \tab \hich\af4\dbch\af31505\loch\f4 - Not always possible:
\par \tab \hich\af4\dbch\af31505\loch\f4 i.e. You wanna read something from your disk
\par \tab \hich\af4\dbch\af31505\loch\f4 i) Data is under the read head of an HDD, and is available immediately
\par \tab \hich\af4\dbch\af31505\loch\f4 ii) Data might have just passed the rea\hich\af4\dbch\af31505\loch\f4 d head, and must wait for 1 rotation to be accessed
\par \tab \hich\af4\dbch\af31505\loch\f4 iii) Data might be cached in RAM, and system will bypass disk hardware
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 iv) Ease of Measurement}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - The method used to measure performance shouldn\hich\f4 \rquote \loch\f4 t be too difficult
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 v) Consistency}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - A metric is consiste\hich\af4\dbch\af31505\loch\f4 nt if it\hich\f4 \rquote \loch\f4 s precisely defined and applicable across systems
\par \hich\af4\dbch\af31505\loch\f4 - This should be referred to as }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 generality}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  or }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 universality}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 vi) Independence}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - (Look up in Textbook?)
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Computer Metrics}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Include ways of comparing various computer performance
\par \hich\af4\dbch\af31505\loch\f4 - They\hich\f4 \rquote \loch\f4 re very un\hich\af4\dbch\af31505\loch\f4 reliable, but why?
\par \tab \hich\af4\dbch\af31505\loch\f4 - Specifically, why is }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 clock frequency}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  not a reliable indicator of performance?
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Efficiency}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Computer is always executing instructions unless it\hich\f4 \rquote \loch\f4 s in a halt/suspended state
\par \hich\af4\dbch\af31505\loch\f4 - Computer might not be executing useful instructions
\par \tab \hich\af4\dbch\af31505\loch\f4 - This is an example of idling, and waiting for instructions
\par \hich\af4\dbch\af31505\loch\f4 - Efficiency of a computer is an indication of the time that it is doing useful work 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Efficiency = Optimal Time/Actual Time
\par \tab \tab \tab \hich\af4\dbch\af31505\loch\f4 = Theoretical/ Observed
\par \hich\af4\dbch\af31505\loch\f4 i.e.
\par \tab \hich\af4\dbch\af31505\loch\f4 - 20s required to compute a certain \hich\af4\dbch\af31505\loch\f4 task
\par \tab \hich\af4\dbch\af31505\loch\f4 - 5s needed to wait for memory to be accessed
\par \hich\af4\dbch\af31505\loch\f4 (20s) / (20s + 5s) = 80%
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Throughput}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Measure of the amount of work a computer performs per unit of time
\par \hich\af4\dbch\af31505\loch\f4 - Upper limit to a throughput can be found from basic system parameters
\par \hich\af4\dbch\af31505\loch\f4 i.e.
\par \tab \hich\af4\dbch\af31505\loch\f4 - PC has 500MHz clo\hich\af4\dbch\af31505\loch\f4 ck
\par \tab \hich\af4\dbch\af31505\loch\f4 - Can execute 2 instructions in parallel per clock cycle
\par \tab \hich\af4\dbch\af31505\loch\f4 - Each instruction takes 1, 2 or 4 clock cycles
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - The upper limit occurs when all instructions are being executed in parallel in 1 cycle 
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - 10^9 instructions/s
\par \hich\af4\dbch\af31505\loch\f4 - Throughput is defined with }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 a\hich\af4\dbch\af31505\loch\f4 mount of work}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  because instruction execution is only useful if the instructions aren\hich\f4 \rquote \loch\f4 t garbage
\par \tab \hich\af4\dbch\af31505\loch\f4 \hich\f4 - You could have a computer running an endless loop and still not do any \'93\loch\f4 \hich\f4 work\'94
\par \hich\af4\dbch\af31505\loch\f4 - This is why }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 instructions/second}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 is a poor indicator of PC performance
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Latency}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Delay between request, and activity
\par \tab \hich\af4\dbch\af31505\loch\f4 - In other words, }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 wait time}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Must consider latency in rotating disk memory systems
\par \hich\af4\dbch\af31505\loch\f4 \hich\f4 - You have to wait, on average, \'bd\loch\f4  a revolution for data to be accessible by the read/write head
\par \hich\af4\dbch\af31505\loch\f4 - Latency is compensated for with pro\hich\af4\dbch\af31505\loch\f4 cessing time, but it is still important 
\par \hich\af4\dbch\af31505\loch\f4 - Latency is sometimes defined as the time it takes to }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 finish}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  a process (also considered wait time)
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Relative Performance}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - How does 1 PC compare against another PC?
\par \hich\af4\dbch\af31505\loch\f4 - Relative performance is the inverse of executi\hich\af4\dbch\af31505\loch\f4 on times
\par 
\par }{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\ul\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Performance(A)}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  = }{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\ul\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 ExecutionTime(B)}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 Performance(B) \tab  ExecutionTime(A)
\par 
\par \hich\af4\dbch\af31505\loch\f4 If A executes a program in 105s, and B executes it in 125S
\par \hich\af4\dbch\af31505\loch\f4 Relative performance is 1.190, 
\par \hich\af4\dbch\af31505\loch\f4 Thus you can say A is 0.19 or 19% faster than B
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 - In computer design, you wanna know\hich\af4\dbch\af31505\loch\f4  how much faster the new computer is compared to the old computer
\par \hich\af4\dbch\af31505\loch\f4 - This measure is called the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Speedup Ratio}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  and is a measure of }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Relative Performance}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par 
\par \hich\af4\dbch\af31505\loch\f4 Speedup Ratio = (Execution Time on Reference) / (Execution Time)
\par \hich\af4\dbch\af31505\loch\f4 - If a reference machine takes 100s to execute a program
\par \tab \hich\af4\dbch\af31505\loch\f4 - And the test machine takes 50s
\par \tab \hich\af4\dbch\af31505\loch\f4 - The speedup ratio is 100/50 = 2x
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Time/Rate}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Benchmarks are:
\par \tab \hich\af4\dbch\af31505\loch\f4 - Time required to execute a task
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - 20s to execute a task
\par \tab \hich\af4\dbch\af31505\loch\f4 - Rate that the task is executed at 
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - 12 tasks/s
\par 
\par \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Quake}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 used to be a benchmark to compare FPS relative to other computers
\par \hich\af4\dbch\af31505\loch\f4 - People like metrics that increase numerically with performance
\par \tab \hich\af4\dbch\af31505\loch\f4 - Not metrics that decrease with performance
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - i.e. they like that rates increases with performance
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - \tab they prefer that to time reducing with performance
\par 
\par \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Time}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  & }{\rtlch\fcs1 
\ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Rate}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  don\hich\f4 \rquote \loch\f4 t behave similarly to averaging 
\par \hich\af4\dbch\af31505\loch\f4 - If we benchmark PC\hich\f4 \rquote \loch\f4 s A & B, and yield 2 & 4 Seconds
\par \hich\af4\dbch\af31505\loch\f4 We can say the rates are:
\par \tab \hich\af4\dbch\af31505\loch\f4 - 0.5/s for A
\par \tab \hich\af4\dbch\af31505\loch\f4 - 0.25/s for B
\par 
\par \hich\af4\dbch\af31505\loch\f4 \hich\f4 Average execution time becomes \'bd\loch\f4 (2+\hich\af4\dbch\af31505\loch\f4 4) = 3s
\par \tab \hich\af4\dbch\af31505\loch\f4 - But the average }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 rate}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
\hich\f4  of execution time is \'bd\loch\f4 (0.5 + .25) = 0.375
\par \hich\af4\dbch\af31505\loch\f4 Average execution time is 3s
\par \tab \hich\af4\dbch\af31505\loch\f4 - This is an average }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 rate}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 of 1/3s = 0.33s 
\par 
\par \hich\af4\dbch\af31505\loch\f4 - Why is there a difference in averaging rate/time and execution time?
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Clock Rate}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - This is the speed at which internal operations are carried out in a computer
\par \hich\af4\dbch\af31505\loch\f4 - Using clock rate as a metric is probably the worst idea
\par \hich\af4\dbch\af31505\loch\f4 - Why?
\par \hich\af4\dbch\af31505\loch\f4 Examine Fig 6.9
\par 
\par \hich\af4\dbch\af31505\loch\f4 - A processor completes an internal operation PER clock cycle
\par \hich\af4\dbch\af31505\loch\f4 - Why isn\hich\f4 \rquote \loch\f4 t performance proportio\hich\af4\dbch\af31505\loch\f4 nal to clock rate?
\par 
\par \hich\af4\dbch\af31505\loch\f4 This is why:
\par \hich\af4\dbch\af31505\loch\f4 a) No }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 single clock}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 in most computers 
\par \tab \hich\af4\dbch\af31505\loch\f4 - Many computers have independent clocks 
\par \hich\af4\dbch\af31505\loch\f4 b) CPU might have several functional units all dependent on a master clock
\par \tab \hich\af4\dbch\af31505\loch\f4 - Perhaps master clock pulses very fast and all sub-clocks run at \hich\af4\dbch\af31505\loch\f4 a sub-multiple of this pulse rate
\par \hich\af4\dbch\af31505\loch\f4 c) Some processors have variable clock rates
\par \tab \hich\af4\dbch\af31505\loch\f4 - Mobile processors use }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 clock throttling}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  or }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 dynamic frequency scaling}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 to reduce power consumption
\par \hich\af4\dbch\af31505\loch\f4 d) Some processors switch speeds depending on core temperatures
\par 
\par \hich\af4\dbch\af31505\loch\f4 A simple tric\hich\af4\dbch\af31505\loch\f4 k used to double the clock frequency is:
\par \hich\af4\dbch\af31505\loch\f4 - Using the original clock wave
\par \hich\af4\dbch\af31505\loch\f4 - Delaying the wave by 90degrees
\par \hich\af4\dbch\af31505\loch\f4 - Using an XOR of the two to create a double wave pattern
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Clock Scaling}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Lets speed up the clock
\par \hich\af4\dbch\af31505\loch\f4 Examine Fig 6.11
\par 
\par \hich\af4\dbch\af31505\loch\f4 - Time is proportional to clock speed in this diagram
\par \hich\af4\dbch\af31505\loch\f4 A memory access operation requires 52 nanoseconds
\par \hich\af4\dbch\af31505\loch\f4 - The period of a clock cycle is > 52 nanoseconds
\par 
\par \hich\af4\dbch\af31505\loch\f4 BUT
\par 
\par \hich\af4\dbch\af31505\loch\f4 If we wanna shorten the clock speed to <52 nanoseconds,
\par \hich\af4\dbch\af31505\loch\f4 - We would have to wait for another cycl\hich\af4\dbch\af31505\loch\f4 e to let the memory access operation complete
\par \hich\af4\dbch\af31505\loch\f4 - OR delay the clock, which is just anti-beneficial
\par 
\par \hich\af4\dbch\af31505\loch\f4 Even so,
\par \hich\af4\dbch\af31505\loch\f4 - It\hich\f4 \rquote \loch\f4 s difficult to alter the clock rate from pulse to pulse
\par \hich\af4\dbch\af31505\loch\f4 - Systems extend operations using }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 wait states}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  
\par 
\par \hich\af4\dbch\af31505\loch\f4 Suppose we have a period of 30ns betwee\hich\af4\dbch\af31505\loch\f4 n clock cycles
\par \hich\af4\dbch\af31505\loch\f4 - The memory access requires 2 cycles
\par \hich\af4\dbch\af31505\loch\f4  - Operation takes 2x30 ns to complete
\par 
\par \hich\af4\dbch\af31505\loch\f4 - This }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 non-scalable}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 clock property demonstrates why some computers are unstable if you try and }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 over clock}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  them
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Are MHz Enough?}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - PC buyers rely on clock speed of a PC microprocessor to determine purchasing decision
\par \hich\af4\dbch\af31505\loch\f4 - The industry doesn\hich\f4 \rquote \loch\f4 t have a simple, universally accepted way to judge performance
\par 
\par \hich\af4\dbch\af31505\loch\f4 - Popularity of PC means that plebs who don\hich\f4 \rquote \loch\f4 t understand PC performance rely only o\hich\af4\dbch\af31505\loch\f4 n }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4 clock speed}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Growth of PC purchases means that people will just blindly buy PC\hich\f4 \rquote \loch\f4 s without analyzing their specs
\par \hich\af4\dbch\af31505\loch\f4 - Sophistication of PC\hich\f4 \rquote \loch\f4 s makes it difficult for the beginning consumer to understand the performance
\par 
\par \hich\af4\dbch\af31505\loch\f4 - Clock speed arguments are useless now \hich\af4\dbch\af31505\loch\f4 that the power barrier is overcome
\par \hich\af4\dbch\af31505\loch\f4 - Clock speed has plateaued due to the limits of power dissipation 
\par \hich\af4\dbch\af31505\loch\f4 - Power dissipation is proportional to the square of clock frequency
\par \hich\af4\dbch\af31505\loch\f4 - Now multicore processors are more favoured than faster processors
\par 
\par \hich\af4\dbch\af31505\loch\f4 - If new semico\hich\af4\dbch\af31505\loch\f4 nductor materials are created, clock speed might increase again
\par \hich\af4\dbch\af31505\loch\f4 - Circuit innovations such as asynchronous clocking might increase clock speed
\par \hich\af4\dbch\af31505\loch\f4 - Asynchronous clocks can run at 70% lower power levels
\par \tab \hich\af4\dbch\af31505\loch\f4 - Their drawback is that they have problematic designs a\hich\af4\dbch\af31505\loch\f4 nd testing
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 MIPS}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - This is a slightly better metric at which to measure clock speed- }{\rtlch\fcs1 \ai\af4\afs36 \ltrch\fcs0 \i\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 millions of instructions per second}{\rtlch\fcs1 
\af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - This removes discrepancy between systems
\par \hich\af4\dbch\af31505\loch\f4 - It looks at instructions per second- not clocks per second
\par 
\par \hich\af4\dbch\af31505\loch\f4 For any computer:
\par 
\par \hich\af4\dbch\af31505\loch\f4 MIPS\tab  = n/ (t x 10^6)
\par \hich\af4\dbch\af31505\loch\f4 n = # executions instructed
\par \hich\af4\dbch\af31505\loch\f4 t = time of execution
\par 
\par \hich\af4\dbch\af31505\loch\f4 - However, MIPS is just as flawed as clock rate
\par \hich\af4\dbch\af31505\loch\f4 - It only tells you how fast a computer executes instructions
\par \tab \hich\af4\dbch\af31505\loch\f4 - It tells you nothing about the instructions being executed
\par 
\par \hich\af4\dbch\af31505\loch\f4 If you hav\hich\af4\dbch\af31505\loch\f4 e PC\hich\f4 \rquote \loch\f4 s:
\par \hich\af4\dbch\af31505\loch\f4 A & B
\par \hich\af4\dbch\af31505\loch\f4 where
\par \hich\af4\dbch\af31505\loch\f4 A = load/store\tab \tab \tab \tab (more instructions) 
\par \hich\af4\dbch\af31505\loch\f4 B = memory-register \tab \tab (less instructions)
\par 
\par \hich\af4\dbch\af31505\loch\f4 - If A and B have the same MIPS rating, both PC\hich\f4 \rquote \loch\f4 s would have the same performance
\par \hich\af4\dbch\af31505\loch\f4 - But B is theoretically faster because it has less instructions
\par \tab \hich\af4\dbch\af31505\loch\f4 - ASSU\hich\af4\dbch\af31505\loch\f4 MING that all instructions work at the same time
\par \hich\af4\dbch\af31505\loch\f4 - But A might be faster because B\hich\f4 \rquote \loch\f4 s Memory-R registers slower than A\hich\f4 \rquote \loch\f4 s Register-Register
\par 
\par 
\par \hich\af4\dbch\af31505\loch\f4 What it says }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 MIPS is sensitive to how a compiler generates code}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4 , what does it mean?
\par \hich\af4\dbch\af31505\loch\f4 - If 1 instruction takes cycles \hich\af4\dbch\af31505\loch\f4 x time\tab  (cycles is # of clock cycles needed) (time is the cycle time/period)
\par \hich\af4\dbch\af31505\loch\f4 Then total execution time is:
\par 
\par \hich\af4\dbch\af31505\loch\f4 t = t x sum(n) x c
\par 
\par \hich\af4\dbch\af31505\loch\f4 - n = # of times the instruction happens
\par \hich\af4\dbch\af31505\loch\f4 - c = # of cycles the instruction requires to complete
\par 
\par \hich\af4\dbch\af31505\loch\f4 Putting this in for the MIPS equation,
\par 
\par \hich\af4\dbch\af31505\loch\f4 MIPS = }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 n}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  / (}{\rtlch\fcs1 
\ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 t}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  x }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4 sum(n)}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  x }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 c}{\rtlch\fcs1 \af4\afs36 
\ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  x }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 10^6}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par 
\par \hich\af4\dbch\af31505\loch\f4 So when a program is compiled, this program has:
\par \hich\af4\dbch\af31505\loch\f4 - 2 million 1-cycle instructions & 
\par \hich\af4\dbch\af31505\loch\f4 - 1 million 2-cycle instructions
\par \hich\af4\dbch\af31505\loch\f4 - Assuming that t = 10ns, then
\par 
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 2 x 10}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\super\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4 6}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  x 1 x 10 ns + 1 x 10}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\super\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 6}{
\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  x\hich\af4\dbch\af31505\loch\f4  2 x 10 ns = 4 x 10}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\super\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 6}{\rtlch\fcs1 
\af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  x 10 ns = 4 x 10}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\super\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 -2}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 s
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\tx7360\tx7940\tx8500\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 But what if a compiler generates code with
\par \hich\af4\dbch\af31505\loch\f4 - 1.5 million 1-cycle
\par \hich\af4\dbch\af31505\loch\f4 - 1.2 million 2-cycle instructions
\par \hich\af4\dbch\af31505\loch\f4 - It becomes:
\par 
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 1.5 x 10}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\super\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4 6}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  x 1 x 10 ns + 1.2 x 10}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\super\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 6}{
\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  x 2 x 10 ns = 3.9 x 10}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\super\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 6}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  x 10 ns = 3.9 x 10}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\super\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 -2}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4 s
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\tx7360\tx7940\tx8500\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 This second compiler generates faster code..
\par \hich\af4\dbch\af31505\loch\f4 BUT if we compare MIPS values:
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Case1)}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 t = }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 4 x 10}{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\super\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 -2}{
\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 s}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 MIPS = 3 x 10}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\super\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 6}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 /(10 ns x (2 x 10}{
\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\super\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 6}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  x 1 + 1 x 10}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\super\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 6}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  x 2) x 10}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\super\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4 6}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 ) = 0.75 x 10}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\super\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 2}{\rtlch\fcs1 
\af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  = 75 MIPS
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Case2) }{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 t = }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 3.9 x 10}{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\super\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 -2}{
\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 s}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 MIPS = 2.7 x 10}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\super\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 6}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
/(10 ns x (1.5 x 10}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\super\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 6}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  x 1 + 1.2 x 10}{\rtlch\fcs1 \af4\afs36 
\ltrch\fcs0 \f4\fs36\super\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 6}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  x 2) x 10}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\super\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4 6}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 )
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  = 0.69 x 10}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\super\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4 -2}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  = 69 MIPS
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\tx7360\tx7940\tx8500\wrapdefault\faauto\rin0\lin0\itap0 {\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - The faster computer has a lower MIPS, but it\hich\f4 \rquote \loch\f4 s faster
\par \hich\af4\dbch\af31505\loch\f4 - The instruction }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 throughput}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  does
\hich\f4 \rquote \loch\f4 t take into account how much work each instruction does
\par \hich\af4\dbch\af31505\loch\f4 - This results in the failure of the MIPS as a good metric
\par 
\par \hich\af4\dbch\af31505\loch\f4 - Average \hich\af4\dbch\af31505\loch\f4 # of clock cycles per instruction is determined by }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 instruction mix}{\rtlch\fcs1 
\af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \tab \hich\af4\dbch\af31505\loch\f4 \hich\f4 - This is the relative num of 1-cycle, 2-cycle, 3-cycle  \'85\loch\f4  n-cycle
\par \hich\af4\dbch\af31505\loch\f4 - It is also governed by organization of }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 logic design}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  in the processor
\par 
\par \hich\af4\dbch\af31505\loch\f4 (CPI FORMULAE GOES HERE)
\par 
\par \hich\af4\dbch\af31505\loch\f4 CPI = sum(Fi x Ci)
\par \hich\af4\dbch\af31505\loch\f4 - Fi =  fraction of instructions that take Ci(clock cycles) to execute
\par \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Non-scalar}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 processors have a value of }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 i}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  ranging from 1-}{\rtlch\fcs1 
\ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 N}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 N}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 is the longest instruction in terms of clock cycles
\par 
\par \hich\af4\dbch\af31505\loch\f4 - Clock period is restricted by device physics, logic design, and hea\hich\af4\dbch\af31505\loch\f4 t dissipation 
\par \hich\af4\dbch\af31505\loch\f4 - The rate at which signals are sent through semiconductors is affected by semiconductor }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 length}{\rtlch\fcs1 \af4\afs36 
\ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  and }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 electric properties}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - When a signal changes }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 levels}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 (from 0 -> 1), the inter-electrode capacitances of transistors on the chip must be charge\hich\af4\dbch\af31505\loch\f4 d
\par \tab \hich\af4\dbch\af31505\loch\f4 - This needs energy, and faster level changing, increases higher power consumption
\par \hich\af4\dbch\af31505\loch\f4 - All energy pretty much ends up as heat, and therefore, upping clock rate = upping heat output
\par \hich\af4\dbch\af31505\loch\f4 - Heat is dissipated through conduction
\par \hich\af4\dbch\af31505\loch\f4 - Clock rate is thus limited by sy\hich\af4\dbch\af31505\loch\f4 stem\hich\f4 \rquote \loch\f4 s ability to dissipate heat
\par \hich\af4\dbch\af31505\loch\f4 TL;DR: More speed = more heat = more dissipation problems = plateau
\par 
\par \hich\af4\dbch\af31505\loch\f4 So how do we accurately judge processing power?
\par \hich\af4\dbch\af31505\loch\f4 \hich\f4 - We can use a \'93\loch\f4 \hich\f4 weighted average\'94\loch\f4  approach
\par \hich\af4\dbch\af31505\loch\f4 - Getting cycles/instruction and multiply that by the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 frequency}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  at which it happens
\par 
\par \hich\af4\dbch\af31505\loch\f4 - We could also calculate }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 avg time / instruction}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Relating the (relative frequency) x (% of time an instruction takes)
\par \tab \hich\af4\dbch\af31505\loch\f4 - Multiplying the class frequency by cycle #, and dividing by average cycles per instruction
\par \hich\af4\dbch\af31505\loch\f4 Table 6.5 explains t\hich\af4\dbch\af31505\loch\f4 his pretty well
\par 
\par \hich\af4\dbch\af31505\loch\f4 Fig 6.14 Sums up Clock Rate, MIPS, Instruction Count and CS design
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 MFLOPS}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - Millions of Floating-Point Instructions / Second
\par \hich\af4\dbch\af31505\loch\f4 - MIPS objectives also apply to MFLOPS
\par \hich\af4\dbch\af31505\loch\f4 - BUT the metrics of MFLOPS is a lot better than MIPS
\par 
\par \hich\af4\dbch\af31505\loch\f4 Why?
\par \hich\af4\dbch\af31505\loch\f4 - MFLOPS measures }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 work done}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
, and not }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 instruction throughput}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - MIPS measure all instructions
\par \hich\af4\dbch\af31505\loch\f4 - MFLOPS measures }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 only}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 the floating-point operations 
\par \hich\af4\dbch\af31505\loch\f4 - Since PC\hich\f4 \rquote \loch\f4 s don\hich\f4 \rquote \loch\f4 t all implement floating-point operations the same, MFLOPS metric is difficult to understand
\par \hich\af4\dbch\af31505\loch\f4 - One computer might use dedicated hardware, but another might just use standard hardware
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Amdahl\hich\f4 \rquote \loch\f4 s Law}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Most famous }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 law}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 for governing PC performance
\par \hich\af4\dbch\af31505\loch\f4 - Infamous because it places a limit on max performance increases (due to subsystem improvements) 
\par \hich\af4\dbch\af31505\loch\f4 - It \hich\af4\dbch\af31505\loch\f4 describes performance increases, when a program is run in a parallel-capable system
\par \hich\af4\dbch\af31505\loch\f4 - Tells you what }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 performance increase}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  you get for greater }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 parallelism}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  

\par 
\par \hich\af4\dbch\af31505\loch\f4 - Useful for determining local improvements effete on global system
\par \hich\af4\dbch\af31505\loch\f4 - Highlights bottlenecks
\par 
\par \hich\af4\dbch\af31505\loch\f4 Exam\hich\af4\dbch\af31505\loch\f4 ining Fig 6.15
\par \hich\af4\dbch\af31505\loch\f4 - Some parts cannot be improved, these are known as }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 serial (irreducible) parts}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  of a process
\par \hich\af4\dbch\af31505\loch\f4 - The improve able parts of a program are known as the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 parallel}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  parts
\par \hich\af4\dbch\af31505\loch\f4 - System performance is dominated by the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 serial}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  part
\par \hich\af4\dbch\af31505\loch\f4 \hich\f4 - The general idea is to make the \'93\loch\f4 \hich\f4 common case fast\'94
\par \tab \hich\af4\dbch\af31505\loch\f4 - Improve the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 serial}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  part

\par 
\par \hich\af4\dbch\af31505\loch\f4 - If a computer runs a program on 1 processor in time }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 t}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 ,
\par \hich\af4\dbch\af31505\loch\f4 \hich\f4 - If we have \'93}{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 p}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \loch\af4\dbch\af31505\hich\f4 \'94
\loch\f4 \hich\f4  processors, and the program is in \'93}{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 p}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \loch\af4\dbch\af31505\hich\f4 \'94
\loch\f4  chunks,
\par 
\par \hich\af4\dbch\af31505\loch\f4 The program will run in }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 t }{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 / }{
\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 p}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  seconds
\par 
\par \hich\af4\dbch\af31505\loch\f4 But what if the\hich\af4\dbch\af31505\loch\f4  chunks are not equally divided?
\par 
\par \hich\af4\dbch\af31505\loch\f4 - If 1 chunk can only run on 1 specific processor, and
\par \tab \hich\af4\dbch\af31505\loch\f4 - Only a fraction (}{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 f}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
) of the program can run on }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 p}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  processors,
\par 
\par \hich\af4\dbch\af31505\loch\f4 Parallel computer system execution time (T) will be:
\par 
\par \hich\af4\dbch\af31505\loch\f4 Tp = (t)(f) + (t)(f)
\par \hich\af4\dbch\af31505\loch\f4 - Since f + f = 1
\par \hich\af4\dbch\af31505\loch\f4 - Since t \hich\af4\dbch\af31505\loch\f4 = t/p
\par 
\par \hich\af4\dbch\af31505\loch\f4 Tp = t(f + (1-f)/-p)
\par 
\par \hich\af4\dbch\af31505\loch\f4 The }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 speedup ratio}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 for this system is S = t/ Tp
\par \hich\af4\dbch\af31505\loch\f4 So
\par 
\par \hich\af4\dbch\af31505\loch\f4 S = p/ ((p)(fs) + 1- (fs))
\par 
\par \hich\af4\dbch\af31505\loch\f4 - }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Amdahl\hich\f4 \rquote \loch\f4 s Law}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  illustrates the effect of bottlenecks on systems
\par \tab \hich\af4\dbch\af31505\loch\f4 - There is a limit beyond which further improvements are useless, until the bottleneck is removed
\par 
\par \hich\af4\dbch\af31505\loch\f4 S = \tab 1 / ((1-FractionEnhanced) + (FractionEnhanced/SpeedupEnhanced))
\par 
\par \hich\af4\dbch\af31505\loch\f4 Recall analogy of: Running at the speed of light to your car, and then driving the car\hich\af4\dbch\af31505\loch\f4  home.
\par \hich\af4\dbch\af31505\loch\f4 You need to get the car home. But you can\hich\f4 \rquote \loch\f4 t just pick it up and run with it. You HAVE to drive it (this is the serial portion)
\par \hich\af4\dbch\af31505\loch\f4 No matter how fast you move, you cannot possibly drive the car faster than its top speed, and this is the bottleneck.
\par 
\par \hich\af4\dbch\af31505\loch\f4 - A\hich\af4\dbch\af31505\loch\f4 n infinite # of processors cannot make the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 speedup ratio}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  > 1/}{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Fraction of Time for Serial Processing}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 
\f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 ^ This is illustrated by Table 6.9
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Amdahl\hich\f4 \rquote \loch\f4 s Law, 2nd Example}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - We have 6 sequential processes
\par \hich\af4\dbch\af31505\loch\f4 - 5 Processes are accelerated using certain factors, differe\hich\af4\dbch\af31505\loch\f4 nt from another (3x, 2x, 4x, 2x)
\par \hich\af4\dbch\af31505\loch\f4 - Once you accelerate all the possible processes, you reach a state where the common case is eliminated (nothing left to accelerate)
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Benchmarks}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - To evaluate a PC, you ideally want to run a program that the PC will be run\hich\af4\dbch\af31505\loch\f4 ning a lot
\par \hich\af4\dbch\af31505\loch\f4 - This is impractical because of the dynamic programs the PC will execute
\par 
\par \hich\af4\dbch\af31505\loch\f4 \hich\f4 So how can you \'93\loch\f4 \hich\f4 benchmark\'94\loch\f4  a PC?
\par \hich\af4\dbch\af31505\loch\f4 - Use }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 kernels}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
, or fragments of intense computation 
\par \tab \hich\af4\dbch\af31505\loch\f4 - i.e. }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 LINPACK}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  benchmark

\par \hich\af4\dbch\af31505\loch\f4 - Use }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 synthetic}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 benchmarks, that are programs designed to evaluate computer performance
\par \tab \hich\af4\dbch\af31505\loch\f4 - These might be a little bit more realistic in relating to the type of code that users might use
\par 
\par \hich\af4\dbch\af31505\loch\f4 - Benchmarks have 2 categories
\par \tab \hich\af4\dbch\af31505\loch\f4 1) }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Fine Grained}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - Instructions that measure the s\hich\af4\dbch\af31505\loch\f4 maller details of a PC
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - i.e. Branch Instructions
\par \tab \hich\af4\dbch\af31505\loch\f4 2) }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Coarse Grained}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - Instructions that measure the overall performance of a computer
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - i.e. the whole PC
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 SPEC}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - An organization that offers }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 unbiased}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  advice
\par \hich\af4\dbch\af31505\loch\f4 - Standard Performance Evaluation Corporat\hich\af4\dbch\af31505\loch\f4 ion
\par \tab \hich\af4\dbch\af31505\loch\f4 - This is a company that establishes, maintains and endorses a standard set of relevant benchmarks
\par \tab \hich\af4\dbch\af31505\loch\f4 - These are designed to test new PC\hich\f4 \rquote \loch\f4 s 
\par 
\par \hich\af4\dbch\af31505\loch\f4 - Users are responsible for compiling benchmarks before they\hich\f4 \rquote \loch\f4 re run
\par \hich\af4\dbch\af31505\loch\f4 - SPEC allows 2 types of }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 compilation}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \tab \hich\af4\dbch\af31505\loch\f4 i) }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Ba\hich\af4\dbch\af31505\loch\f4 se Result}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - Derived from Compiler flags and Switches
\par 
\par \tab \hich\af4\dbch\af31505\loch\f4 ii) }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Peak Metric}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - Derived from optimized switches from each individual program
\par 
\par \hich\af4\dbch\af31505\loch\f4 SPEC HISTORY
\par \hich\af4\dbch\af31505\loch\f4 - SPEC suites have evolved to remove inefficiencies and errors
\par \hich\af4\dbch\af31505\loch\f4 - Benchmarks of a SPEC suite offer a wide range of applications
\par \tab \hich\af4\dbch\af31505\loch\f4 - i.e. Data compression 
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - Quantum mechanics
\par \tab \tab \hich\af4\dbch\af31505\loch\f4 - Fluid Dynamics
\par \hich\af4\dbch\af31505\loch\f4 - Complexity of SPEC benchmarks grows as with computer evolution
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 SPEC Methodology}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Measures time required to execute each p\hich\af4\dbch\af31505\loch\f4 rogram in test suite
\par \hich\af4\dbch\af31505\loch\f4 - SPEC is executed on a }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 standard basis machine}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  to give x time values
\par \hich\af4\dbch\af31505\loch\f4 - These x time values are used as a relative reference
\par \tab \hich\af4\dbch\af31505\loch\f4 - Test Suite / Standard Basis Machine Time
\par \tab \hich\af4\dbch\af31505\loch\f4 - This normalizes the results
\par \hich\af4\dbch\af31505\loch\f4 - Normalized times are averaged, and\hich\af4\dbch\af31505\loch\f4  a SPEC metric is given
\par 
\par \hich\af4\dbch\af31505\loch\f4 - SPEC benchmarks are averaged by taking the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 geometric mean}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4 , not }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 arithmetic mean}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Geometric Mean:}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \tab \hich\af4\dbch\af31505\loch\f4 \hich\f4 - Take \'93\loch\f4 \hich\f4 n\'94\loch\f4  values and multiply them together
\par \tab \hich\af4\dbch\af31505\loch\f4 - Take the }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 nth}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 
 root of that number
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 Arithmetic Mean}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \tab \hich\af4\dbch\af31505\loch\f4 \hich\f4 - Take \'93\loch\f4 \hich\f4 n\'94\loch\f4  values and sum them
\par \tab \hich\af4\dbch\af31505\loch\f4 - Divide by }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 n}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par 
\par \hich\af4\dbch\af31505\loch\f4 - Normalizing a machine helps to reduce large differences in individual benchmarks
\par \hich\af4\dbch\af31505\loch\f4 - SPEC benchmarks are given in }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 unit less}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  values (pretty much ratios)
\par \hich\af4\dbch\af31505\loch\f4 - These values can be interpreted as }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 time}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  or }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 rate}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  with respect to }{
\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 averaging}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 SPEC CPU2006 and the Academic Community}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4  
\par \hich\af4\dbch\af31505\loch\f4 - How are SPEC benchmarks used?
\par \hich\af4\dbch\af31505\loch\f4 - SPEC CPU2006 Integer benchmarks are written in }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 C}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\hich\af4\dbch\af31505\loch\f4  or }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 C++}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - These benchmarks cover commercial & Scientific applications
\par \tab \hich\af4\dbch\af31505\loch\f4 - They represent real-world applications, and not synthetic ap\hich\af4\dbch\af31505\loch\f4 plications
\par 
\par }{\rtlch\fcs1 \ab\af4\afs36 \ltrch\fcs0 \b\f4\fs36\insrsid1067391 \hich\af4\dbch\af31505\loch\f4 SPEC and Power}{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par \hich\af4\dbch\af31505\loch\f4 - Power is a big consideration for PC design
\par \tab \hich\af4\dbch\af31505\loch\f4 - It\hich\f4 \rquote \loch\f4 s so big that it\hich\f4 \rquote \loch\f4 s now a benchmark component
\par \hich\af4\dbch\af31505\loch\f4 - SPEC has made a standard to which a server\hich\f4 \rquote \loch\f4 s power/performance can be measured across multiple loads
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }{\rtlch\fcs1 \af4\afs36 \ltrch\fcs0 \f4\fs36\insrsid1067391 
\par }{\*\themedata 504b030414000600080000002100e9de0fbfff0000001c020000130000005b436f6e74656e745f54797065735d2e786d6cac91cb4ec3301045f748fc83e52d4a
9cb2400825e982c78ec7a27cc0c8992416c9d8b2a755fbf74cd25442a820166c2cd933f79e3be372bd1f07b5c3989ca74aaff2422b24eb1b475da5df374fd9ad
5689811a183c61a50f98f4babebc2837878049899a52a57be670674cb23d8e90721f90a4d2fa3802cb35762680fd800ecd7551dc18eb899138e3c943d7e503b6
b01d583deee5f99824e290b4ba3f364eac4a430883b3c092d4eca8f946c916422ecab927f52ea42b89a1cd59c254f919b0e85e6535d135a8de20f20b8c12c3b0
0c895fcf6720192de6bf3b9e89ecdbd6596cbcdd8eb28e7c365ecc4ec1ff1460f53fe813d3cc7f5b7f020000ffff0300504b030414000600080000002100a5d6
a7e7c0000000360100000b0000005f72656c732f2e72656c73848fcf6ac3300c87ef85bd83d17d51d2c31825762fa590432fa37d00e1287f68221bdb1bebdb4f
c7060abb0884a4eff7a93dfeae8bf9e194e720169aaa06c3e2433fcb68e1763dbf7f82c985a4a725085b787086a37bdbb55fbc50d1a33ccd311ba548b6309512
0f88d94fbc52ae4264d1c910d24a45db3462247fa791715fd71f989e19e0364cd3f51652d73760ae8fa8c9ffb3c330cc9e4fc17faf2ce545046e37944c69e462
a1a82fe353bd90a865aad41ed0b5b8f9d6fd010000ffff0300504b0304140006000800000021006b799616830000008a0000001c0000007468656d652f746865
6d652f7468656d654d616e616765722e786d6c0ccc4d0ac3201040e17da17790d93763bb284562b2cbaebbf600439c1a41c7a0d29fdbd7e5e38337cedf14d59b
4b0d592c9c070d8a65cd2e88b7f07c2ca71ba8da481cc52c6ce1c715e6e97818c9b48d13df49c873517d23d59085adb5dd20d6b52bd521ef2cdd5eb9246a3d8b
4757e8d3f729e245eb2b260a0238fd010000ffff0300504b030414000600080000002100aa5225dfc60600008b1a0000160000007468656d652f7468656d652f
7468656d65312e786d6cec595d8bdb46147d2ff43f08bd3bfe92fcb1c41b6cd9ceb6d94d42eca4e4716c8fadc98e344633de8d0981923c160aa569e943037deb
43691b48a02fe9afd936a54d217fa17746b63c638fbb9b2585a5640d8b343af7ce997bafce1d4997afdc8fa87384134e58dc708b970aae83e3211b9178d2706f
f7bbb99aeb7081e211a22cc60d778eb97b65f7c30f2ea31d11e2083b601ff31dd4704321a63bf93c1fc230e297d814c7706dcc920809384d26f951828ec16f44
f3a542a1928f10895d274611b8bd311e932176fad2a5bbbb74dea1701a0b2e078634e949d7d8b050d8d1615122f89c0734718e106db830cf881df7f17de13a14
7101171a6e41fdb9f9ddcb79b4b330a2628bad66d7557f0bbb85c1e8b0a4e64c26836c52cff3bd4a33f3af00546ce23ad54ea553c9fc29001a0e61a52917dda7
dfaab7dafe02ab81d2438bef76b55d2e1a78cd7f798373d3973f03af40a97f6f03dfed06104503af4029dedfc07b5eb51478065e81527c65035f2d34db5ed5c0
2b5048497cb8812ef89572b05c6d061933ba6785d77daf5b2d2d9caf50500d5975c929c62c16db6a2d42f758d2058004522448ec88f9148fd110aa3840940c12
e2ec93490885374531e3305c2815ba8532fc973f4f1da988a01d8c346bc90b98f08d21c9c7e1c3844c45c3fd18bcba1ae4cdcb1fdfbc7cee9c3c7a71f2e89793
c78f4f1efd9c3a32acf6503cd1ad5e7fffc5df4f3f75fe7afeddeb275fd9f15cc7fffed367bffdfaa51d082b5d85e0d5d7cffe78f1ecd5379ffff9c3130bbc99
a0810eef930873e73a3e766eb10816a6426032c783e4ed2cfa2122ba45339e701423398bc57f478406fafa1c5164c1b5b019c13b09488c0d787576cf20dc0b93
9920168fd7c2c8001e30465b2cb146e19a9c4b0b737f164fec9327331d770ba123dbdc018a8dfc766653d05662731984d8a07993a258a0098eb170e4357688b1
6575770931e27a408609e36c2c9cbbc46921620d499f0c8c6a5a19ed9108f232b711847c1bb139b8e3b418b5adba8d8f4c24dc15885ac8f73135c27815cd048a
6c2efb28a27ac0f791086d247bf364a8e33a5c40a6279832a733c29cdb6c6e24b05e2de9d7405eec693fa0f3c84426821cda7cee23c674649b1d06218aa6366c
8fc4a18efd881f428922e7261336f80133ef10790e7940f1d674df21d848f7e96a701b9455a7b42a107965965872791533a37e7b733a4658490d08bfa1e71189
4f15f73559f7ff5b5907217df5ed53cbaa2eaaa0371362bda3f6d6647c1b6e5dbc03968cc8c5d7ee369ac53731dc2e9b0decbd74bf976ef77f2fdddbeee7772f
d82b8d06f9965bc574abae36eed1d67dfb9850da13738af7b9daba73e84ca32e0c4a3bf5cc8ab3e7b8690887f24e86090cdc2441cac64998f88488b017a229ec
ef8bae7432e10bd713ee4c19876dbf1ab6fa96783a8b0ed8287d5c2d16e5a3692a1e1c89d578c1cfc6e15143a4e84a75f50896b9576c27ea51794940dabe0d09
6d329344d942a2ba1c9441520fe610340b09b5b277c2a26e615193ee97a9da6001d4b2acc0d6c9810d57c3f53d30012378a242148f649ed2542fb3ab92f92e33
bd2d984605c03e625901ab4cd725d7adcb93ab4b4bed0c99364868e566925091513d8c87688417d52947cf42e36d735d5fa5d4a02743a1e683d25ad1a8d6fe8d
c579730d76ebda40635d2968ec1c37dc4ad9879219a269c31dc3633f1c4653a81d2eb7bc884ee0ddd95024e90d7f1e6599265cb4110fd3802bd149d520220227
0e2551c395cbcfd24063a5218a5bb104827061c9d541562e1a3948ba99643c1ee3a1d0d3ae8dc848a7a7a0f0a95658af2af3f383a5259b41ba7be1e8d819d059
720b4189f9d5a20ce0887078fb534ca33922f03a3313b255fdad35a685eceaef13550da5e3884e43b4e828ba98a77025e5191d7596c5403b5bac1902aa8564d1
080713d960f5a01add34eb1a2987ad5df7742319394d34573dd35015d935ed2a66ccb06c036bb13c5f93d7582d430c9aa677f854bad725b7bed4bab57d42d625
20e059fc2c5df70c0d41a3b69acca026196fcab0d4ecc5a8d93b960b3c85da599a84a6fa95a5dbb5b8653dc23a1d0c9eabf383dd7ad5c2d078b9af549156df3d
f44f136c700fc4a30d2f81675470954af8f09020d810f5d49e24950db845ee8bc5ad0147ce2c210df741c16f7a41c90f72859adfc97965af90abf9cd72aee9fb
e562c72f16daadd243682c228c8a7efacda50bafa2e87cf1e5458d6f7c7d89966fdb2e0d599467eaeb4a5e11575f5f8aa5ed5f5f1c02a2f3a052ead6cbf55625
572f37bb39afddaae5ea41a5956b57826abbdb0efc5abdfbd0758e14d86b9603afd2a9e52ac520c8799582a45fabe7aa5ea9d4f4aacd5ac76b3e5c6c6360e5a9
7c2c6201e155bc76ff010000ffff0300504b0304140006000800000021000dd1909fb60000001b010000270000007468656d652f7468656d652f5f72656c732f
7468656d654d616e616765722e786d6c2e72656c73848f4d0ac2301484f78277086f6fd3ba109126dd88d0add40384e4350d363f2451eced0dae2c082e8761be
9969bb979dc9136332de3168aa1a083ae995719ac16db8ec8e4052164e89d93b64b060828e6f37ed1567914b284d262452282e3198720e274a939cd08a54f980
ae38a38f56e422a3a641c8bbd048f7757da0f19b017cc524bd62107bd5001996509affb3fd381a89672f1f165dfe514173d9850528a2c6cce0239baa4c04ca5b
babac4df000000ffff0300504b01022d0014000600080000002100e9de0fbfff0000001c0200001300000000000000000000000000000000005b436f6e74656e
745f54797065735d2e786d6c504b01022d0014000600080000002100a5d6a7e7c0000000360100000b00000000000000000000000000300100005f72656c732f
2e72656c73504b01022d00140006000800000021006b799616830000008a0000001c00000000000000000000000000190200007468656d652f7468656d652f74
68656d654d616e616765722e786d6c504b01022d0014000600080000002100aa5225dfc60600008b1a00001600000000000000000000000000d6020000746865
6d652f7468656d652f7468656d65312e786d6c504b01022d00140006000800000021000dd1909fb60000001b0100002700000000000000000000000000d00900007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73504b050600000000050005005d010000cb0a00000000}
{\*\colorschememapping 3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d225554462d3822207374616e64616c6f6e653d22796573223f3e0d0a3c613a636c724d
617020786d6c6e733a613d22687474703a2f2f736368656d61732e6f70656e786d6c666f726d6174732e6f72672f64726177696e676d6c2f323030362f6d6169
6e22206267313d226c743122207478313d22646b3122206267323d226c743222207478323d22646b322220616363656e74313d22616363656e74312220616363
656e74323d22616363656e74322220616363656e74333d22616363656e74332220616363656e74343d22616363656e74342220616363656e74353d22616363656e74352220616363656e74363d22616363656e74362220686c696e6b3d22686c696e6b2220666f6c486c696e6b3d22666f6c486c696e6b222f3e}
{\*\latentstyles\lsdstimax371\lsdlockeddef0\lsdsemihiddendef0\lsdunhideuseddef0\lsdqformatdef0\lsdprioritydef99{\lsdlockedexcept \lsdqformat1 \lsdpriority0 \lsdlocked0 Normal;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 1;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 2;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 3;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 4;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 5;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 6;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 7;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 8;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 9;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 1;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 5;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 6;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 7;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 8;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 9;
\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 1;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 2;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 3;
\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 4;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 5;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 6;
\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 7;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 8;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 9;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Normal Indent;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 footnote text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 annotation text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 header;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 footer;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index heading;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority35 \lsdlocked0 caption;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 table of figures;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 envelope address;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 envelope return;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 footnote reference;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 annotation reference;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 line number;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 page number;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 endnote reference;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 endnote text;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 table of authorities;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 macro;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 toa heading;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 5;\lsdqformat1 \lsdpriority10 \lsdlocked0 Title;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Closing;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Signature;\lsdsemihidden1 \lsdunhideused1 \lsdpriority1 \lsdlocked0 Default Paragraph Font;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text Indent;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 4;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Message Header;\lsdqformat1 \lsdpriority11 \lsdlocked0 Subtitle;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Salutation;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Date;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text First Indent;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text First Indent 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Note Heading;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text Indent 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text Indent 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Block Text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Hyperlink;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 FollowedHyperlink;\lsdqformat1 \lsdpriority22 \lsdlocked0 Strong;
\lsdqformat1 \lsdpriority20 \lsdlocked0 Emphasis;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Document Map;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Plain Text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 E-mail Signature;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Top of Form;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Bottom of Form;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Normal (Web);\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Acronym;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Address;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Cite;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Code;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Definition;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Keyboard;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Preformatted;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Sample;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Typewriter;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Variable;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Normal Table;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 annotation subject;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 No List;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Outline List 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Outline List 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Outline List 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Simple 1;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Simple 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Simple 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Colorful 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Colorful 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Colorful 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 6;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 7;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 8;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 6;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 7;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 8;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table 3D effects 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table 3D effects 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table 3D effects 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Contemporary;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Elegant;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Professional;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Subtle 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Subtle 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Web 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Web 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Web 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Balloon Text;\lsdpriority39 \lsdlocked0 Table Grid;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Theme;\lsdsemihidden1 \lsdlocked0 Placeholder Text;
\lsdqformat1 \lsdpriority1 \lsdlocked0 No Spacing;\lsdpriority60 \lsdlocked0 Light Shading;\lsdpriority61 \lsdlocked0 Light List;\lsdpriority62 \lsdlocked0 Light Grid;\lsdpriority63 \lsdlocked0 Medium Shading 1;\lsdpriority64 \lsdlocked0 Medium Shading 2;
\lsdpriority65 \lsdlocked0 Medium List 1;\lsdpriority66 \lsdlocked0 Medium List 2;\lsdpriority67 \lsdlocked0 Medium Grid 1;\lsdpriority68 \lsdlocked0 Medium Grid 2;\lsdpriority69 \lsdlocked0 Medium Grid 3;\lsdpriority70 \lsdlocked0 Dark List;
\lsdpriority71 \lsdlocked0 Colorful Shading;\lsdpriority72 \lsdlocked0 Colorful List;\lsdpriority73 \lsdlocked0 Colorful Grid;\lsdpriority60 \lsdlocked0 Light Shading Accent 1;\lsdpriority61 \lsdlocked0 Light List Accent 1;
\lsdpriority62 \lsdlocked0 Light Grid Accent 1;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 1;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 1;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 1;\lsdsemihidden1 \lsdlocked0 Revision;
\lsdqformat1 \lsdpriority34 \lsdlocked0 List Paragraph;\lsdqformat1 \lsdpriority29 \lsdlocked0 Quote;\lsdqformat1 \lsdpriority30 \lsdlocked0 Intense Quote;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 1;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 1;
\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 1;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 1;\lsdpriority70 \lsdlocked0 Dark List Accent 1;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 1;\lsdpriority72 \lsdlocked0 Colorful List Accent 1;
\lsdpriority73 \lsdlocked0 Colorful Grid Accent 1;\lsdpriority60 \lsdlocked0 Light Shading Accent 2;\lsdpriority61 \lsdlocked0 Light List Accent 2;\lsdpriority62 \lsdlocked0 Light Grid Accent 2;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 2;
\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 2;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 2;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 2;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 2;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 2;
\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 2;\lsdpriority70 \lsdlocked0 Dark List Accent 2;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 2;\lsdpriority72 \lsdlocked0 Colorful List Accent 2;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 2;
\lsdpriority60 \lsdlocked0 Light Shading Accent 3;\lsdpriority61 \lsdlocked0 Light List Accent 3;\lsdpriority62 \lsdlocked0 Light Grid Accent 3;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 3;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 3;
\lsdpriority65 \lsdlocked0 Medium List 1 Accent 3;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 3;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 3;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 3;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 3;
\lsdpriority70 \lsdlocked0 Dark List Accent 3;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 3;\lsdpriority72 \lsdlocked0 Colorful List Accent 3;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 3;\lsdpriority60 \lsdlocked0 Light Shading Accent 4;
\lsdpriority61 \lsdlocked0 Light List Accent 4;\lsdpriority62 \lsdlocked0 Light Grid Accent 4;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 4;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 4;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 4;
\lsdpriority66 \lsdlocked0 Medium List 2 Accent 4;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 4;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 4;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 4;\lsdpriority70 \lsdlocked0 Dark List Accent 4;
\lsdpriority71 \lsdlocked0 Colorful Shading Accent 4;\lsdpriority72 \lsdlocked0 Colorful List Accent 4;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 4;\lsdpriority60 \lsdlocked0 Light Shading Accent 5;\lsdpriority61 \lsdlocked0 Light List Accent 5;
\lsdpriority62 \lsdlocked0 Light Grid Accent 5;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 5;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 5;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 5;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 5;
\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 5;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 5;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 5;\lsdpriority70 \lsdlocked0 Dark List Accent 5;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 5;
\lsdpriority72 \lsdlocked0 Colorful List Accent 5;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 5;\lsdpriority60 \lsdlocked0 Light Shading Accent 6;\lsdpriority61 \lsdlocked0 Light List Accent 6;\lsdpriority62 \lsdlocked0 Light Grid Accent 6;
\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 6;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 6;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 6;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 6;
\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 6;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 6;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 6;\lsdpriority70 \lsdlocked0 Dark List Accent 6;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 6;
\lsdpriority72 \lsdlocked0 Colorful List Accent 6;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 6;\lsdqformat1 \lsdpriority19 \lsdlocked0 Subtle Emphasis;\lsdqformat1 \lsdpriority21 \lsdlocked0 Intense Emphasis;
\lsdqformat1 \lsdpriority31 \lsdlocked0 Subtle Reference;\lsdqformat1 \lsdpriority32 \lsdlocked0 Intense Reference;\lsdqformat1 \lsdpriority33 \lsdlocked0 Book Title;\lsdsemihidden1 \lsdunhideused1 \lsdpriority37 \lsdlocked0 Bibliography;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority39 \lsdlocked0 TOC Heading;\lsdpriority41 \lsdlocked0 Plain Table 1;\lsdpriority42 \lsdlocked0 Plain Table 2;\lsdpriority43 \lsdlocked0 Plain Table 3;\lsdpriority44 \lsdlocked0 Plain Table 4;
\lsdpriority45 \lsdlocked0 Plain Table 5;\lsdpriority40 \lsdlocked0 Grid Table Light;\lsdpriority46 \lsdlocked0 Grid Table 1 Light;\lsdpriority47 \lsdlocked0 Grid Table 2;\lsdpriority48 \lsdlocked0 Grid Table 3;\lsdpriority49 \lsdlocked0 Grid Table 4;
\lsdpriority50 \lsdlocked0 Grid Table 5 Dark;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 1;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 1;
\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 1;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 1;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 1;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 1;
\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 1;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 2;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 2;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 2;
\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 2;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 2;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 2;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 2;
\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 3;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 3;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 3;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 3;
\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 3;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 3;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 3;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 4;
\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 4;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 4;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 4;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 4;
\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 4;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 4;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 5;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 5;
\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 5;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 5;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 5;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 5;
\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 5;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 6;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 6;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 6;
\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 6;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 6;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 6;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 6;
\lsdpriority46 \lsdlocked0 List Table 1 Light;\lsdpriority47 \lsdlocked0 List Table 2;\lsdpriority48 \lsdlocked0 List Table 3;\lsdpriority49 \lsdlocked0 List Table 4;\lsdpriority50 \lsdlocked0 List Table 5 Dark;
\lsdpriority51 \lsdlocked0 List Table 6 Colorful;\lsdpriority52 \lsdlocked0 List Table 7 Colorful;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 1;\lsdpriority47 \lsdlocked0 List Table 2 Accent 1;\lsdpriority48 \lsdlocked0 List Table 3 Accent 1;
\lsdpriority49 \lsdlocked0 List Table 4 Accent 1;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 1;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 1;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 1;
\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 2;\lsdpriority47 \lsdlocked0 List Table 2 Accent 2;\lsdpriority48 \lsdlocked0 List Table 3 Accent 2;\lsdpriority49 \lsdlocked0 List Table 4 Accent 2;
\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 2;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 2;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 2;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 3;
\lsdpriority47 \lsdlocked0 List Table 2 Accent 3;\lsdpriority48 \lsdlocked0 List Table 3 Accent 3;\lsdpriority49 \lsdlocked0 List Table 4 Accent 3;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 3;
\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 3;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 3;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 4;\lsdpriority47 \lsdlocked0 List Table 2 Accent 4;
\lsdpriority48 \lsdlocked0 List Table 3 Accent 4;\lsdpriority49 \lsdlocked0 List Table 4 Accent 4;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 4;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 4;
\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 4;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 5;\lsdpriority47 \lsdlocked0 List Table 2 Accent 5;\lsdpriority48 \lsdlocked0 List Table 3 Accent 5;
\lsdpriority49 \lsdlocked0 List Table 4 Accent 5;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 5;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 5;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 5;
\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 6;\lsdpriority47 \lsdlocked0 List Table 2 Accent 6;\lsdpriority48 \lsdlocked0 List Table 3 Accent 6;\lsdpriority49 \lsdlocked0 List Table 4 Accent 6;
\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 6;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 6;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 6;}}{\*\datastore 010500000200000018000000
4d73786d6c322e534158584d4c5265616465722e362e3000000000000000000000060000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff090006000000000000000000000001000000010000000000000000100000feffffff00000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdfffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffffffffffff0c6ad98892f1d411a65f0040963251e50000000000000000000000008021
c970d4f7ce01feffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000105000000000000}}