


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             prog2, CODE, READWRITE
    2 00000000                 ENTRY
    3 00000000         
    4 00000000 E28F00AA        ADR              r0, STRING  ;set up r0 to point
                                                             to STRING's memory
                                                             position
    5 00000004 E28F109C        ADR              r1, PLDRM   ;loads the memory l
                                                            ocation of PLDRM in
                                                            to r1 
    6 00000008 E3A02000        MOV              r2, #0x0    ;moves the value of
                                                             EoS into r2
    7 0000000C         LOOP
    8 0000000C E7D13004        LDRB             r3, [r1, r4] ;loads a byte from
                                                             the memory locatio
                                                            n stored in r1 at p
                                                            ointer r4
    9 00000010 EAFFFFFF        B                CHKLB       ;branches to CHKLB
   10 00000014         CHKLB
   11 00000014 E3530040        CMP              r3, #0x40   ;checks if r3's val
                                                            ue is above the hex
                                                            adicimal value 40, 
                                                            which equals to A
   12 00000018 CA000000        BGT              CHKUB       ;branches to CHKUB 
                                                            if the value of r3 
                                                            is greater
   13 0000001C EA00000C        B                NEXT        ;branches to NEXT i
                                                            f its lower
   14 00000020         CHKUB
   15 00000020 E353007B        CMP              r3, #0x7B   ;checks if r3's val
                                                            ue is lower than th
                                                            e hexadicimal value
                                                             7B, which equals t
                                                            o (
   16 00000024 BA000000        BLT              CHK0        ;branches to CHK0 i
                                                            f the value of r3 i
                                                            s lower
   17 00000028 EA000009        B                NEXT        ;branches to NEXT i
                                                            f its higher
   18 0000002C         CHK0
   19 0000002C E353005A        CMP              r3, #0x5A   ;checks if r3's val
                                                            ue is greater equal
                                                             or lower than 5A h
                                                            exadicimal
   20 00000030 CA000000        BGT              CHK1        ;branches to CHK1 i
                                                            f it is greater
   21 00000034 DA000002        BLE              CNVRT       ;branches to CNVRT 
                                                            if it is lower or e
                                                            qual
   22 00000038         CHK1
   23 00000038 E3530061        CMP              r3, #0x61   ;checks if r3's val
                                                            ue is value is grea
                                                            ter equal or lower 
                                                            than 61 hexadicimal
                                                            
   24 0000003C AA000000        BGE              CNVRT       ;branches to CNVRT 
                                                            if it is greater
   25 00000040 BA000003        BLT              NEXT        ;branches to NEXT i
                                                            f it is not
   26 00000044         CNVRT



ARM Macro Assembler    Page 2 


   27 00000044 E353005B        CMP              r3, #0x5B   ;checks if the the 
                                                            value of r3 is lowe
                                                            r than 5B
   28 00000048 B2833020        ADDLT            r3, #0x20   ;if it is, then it 
                                                            adds 20 hexadicimal
                                                             to it and makes it
                                                             lowercase
   29 0000004C         STORE
   30 0000004C E7C03005        STRB             r3, [r0, r5] ;stores the byte v
                                                            alue into the locat
                                                            ion stored in r0 an
                                                            d pointed by r5
   31 00000050 E2855001        ADD              r5, r5, #1  ;increments the poi
                                                            nter r5
   32 00000054         NEXT
   33 00000054 E2844001        ADD              r4, r4, #1  ;incements the poin
                                                            ts r4
   34 00000058 E7D16004        LDRB             r6, [r1, r4] ;loads the next by
                                                            te 
   35 0000005C E1560002        CMP              r6, r2      ;checks if the byte
                                                             is equal to 0x00
   36 00000060 1AFFFFE9        BNE              LOOP        ;if it is not, then
                                                             branches back to L
                                                            OOP
   37 00000064         
   38 00000064 E1A01005        MOV              r1, r5      ;sets the value of 
                                                            r1 to the value of 
                                                            r5
   39 00000068 E3A02000        MOV              r2, #0      ;sets the value of 
                                                            r2 to 0
   40 0000006C E2411001        SUB              r1, r1, #1  ;subtracts 1 from t
                                                            he pointer r1
   41 00000070         CALC
   42 00000070 E7D03002        LDRB             r3, [r0, r2] ;loads a byte from
                                                             the location in r0
                                                             pointer by r2
   43 00000074 E7D04001        LDRB             r4, [r0, r1] ;loads a byte from
                                                             the location in r0
                                                             pointer by r1
   44 00000078 E2822001        ADD              r2, r2, #1  ;increments the poi
                                                            nter r2
   45 0000007C E2411001        SUB              r1, r1, #1  ;decrements the poi
                                                            nter r1
   46 00000080 E1530004        CMP              r3, r4      ;checks if r3 and r
                                                            4 are equal
   47 00000084 0A000000        BEQ              CALCCHK     ;if they are, it br
                                                            anches to CALCCHK
   48 00000088 1A000002        BNE              FAIL        ;if they don't, it 
                                                            branches to FAIL
   49 0000008C         CALCCHK
   50 0000008C E1520001        CMP              r2, r1      ;checks if the valu
                                                            e of r2 points is l
                                                            ess than r1
   51 00000090 BAFFFFF6        BLT              CALC        ;if it is, it brach
                                                            es back to CALC
   52 00000094 EA000001        B                PASS        ;if its not, then i
                                                            t branches to PASS
   53 00000098         FAIL
   54 00000098 E3A00000        MOV              r0, #0      ;sets the value of 



ARM Macro Assembler    Page 3 


                                                            r0 to 0
   55 0000009C EA000000        B                ILOOP       ;branches to JUMP
   56 000000A0         PASS
   57 000000A0 E3A00001        MOV              r0, #1      ;sets the value of 
                                                            r0 to 1
   58 000000A4 EAFFFFFE 
                       ILOOP   B                ILOOP
   59 000000A8         
   60 000000A8                 AREA             prog2, DATA, READWRITE
   61 000000A8 4D 21 61 
              2C 64 61 
              3F 6D 2B 
              00       PLDRM   DCB              "M!a,da?m+",0 ;string
   62 000000B2 00      STRING  DCB              0x00        ;space for new stri
                                                            ng
   63 000000B3                 END
Command Line: --debug --xref --bi --apcs=interwork --depend=.\prog2.d -o.\prog2
.o -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include --predefine="__EVAL SETA 
1" --list=.\prog2.lst prog2.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CALC 00000070

Symbol: CALC
   Definitions
      At line 41 in file prog2.s
   Uses
      At line 51 in file prog2.s
Comment: CALC used once
CALCCHK 0000008C

Symbol: CALCCHK
   Definitions
      At line 49 in file prog2.s
   Uses
      At line 47 in file prog2.s
Comment: CALCCHK used once
CHK0 0000002C

Symbol: CHK0
   Definitions
      At line 18 in file prog2.s
   Uses
      At line 16 in file prog2.s
Comment: CHK0 used once
CHK1 00000038

Symbol: CHK1
   Definitions
      At line 22 in file prog2.s
   Uses
      At line 20 in file prog2.s
Comment: CHK1 used once
CHKLB 00000014

Symbol: CHKLB
   Definitions
      At line 10 in file prog2.s
   Uses
      At line 9 in file prog2.s
Comment: CHKLB used once
CHKUB 00000020

Symbol: CHKUB
   Definitions
      At line 14 in file prog2.s
   Uses
      At line 12 in file prog2.s
Comment: CHKUB used once
CNVRT 00000044

Symbol: CNVRT
   Definitions
      At line 26 in file prog2.s
   Uses
      At line 21 in file prog2.s
      At line 24 in file prog2.s

FAIL 00000098




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: FAIL
   Definitions
      At line 53 in file prog2.s
   Uses
      At line 48 in file prog2.s
Comment: FAIL used once
ILOOP 000000A4

Symbol: ILOOP
   Definitions
      At line 58 in file prog2.s
   Uses
      At line 55 in file prog2.s
      At line 58 in file prog2.s

LOOP 0000000C

Symbol: LOOP
   Definitions
      At line 7 in file prog2.s
   Uses
      At line 36 in file prog2.s
Comment: LOOP used once
NEXT 00000054

Symbol: NEXT
   Definitions
      At line 32 in file prog2.s
   Uses
      At line 13 in file prog2.s
      At line 17 in file prog2.s
      At line 25 in file prog2.s

PASS 000000A0

Symbol: PASS
   Definitions
      At line 56 in file prog2.s
   Uses
      At line 52 in file prog2.s
Comment: PASS used once
PLDRM 000000A8

Symbol: PLDRM
   Definitions
      At line 61 in file prog2.s
   Uses
      At line 5 in file prog2.s
Comment: PLDRM used once
STORE 0000004C

Symbol: STORE
   Definitions
      At line 29 in file prog2.s
   Uses
      None
Comment: STORE unused
STRING 000000B2




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: STRING
   Definitions
      At line 62 in file prog2.s
   Uses
      At line 4 in file prog2.s
Comment: STRING used once
prog2 00000000

Symbol: prog2
   Definitions
      At line 1 in file prog2.s
   Uses
      None
Comment: prog2 unused
16 symbols
347 symbols in table
